# -*- coding: utf-8 -*-
import os
import logging
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters as Filters,
    ContextTypes,
    ConversationHandler,
)
import sys
sys.path.append('/data/data/com.termux/files/usr/lib/python3.12/site-packages')

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
from bot_responses import (
    START_MESSAGE,
    HELP_MENU_MESSAGE,
    RESOURCE_PROMPT_MESSAGE,
    VOLUNTEER_MESSAGE,
    DONATE_MESSAGE,
    EMERGENCY_MESSAGE,
    HOUSING_FINANCE_PROMPT,
    PSYCHOLOGICAL_HELP_PROMPT,
    CONSULTATION_PROMPT,
    MESSAGE_SENT_SUCCESS,
    MESSAGE_SEND_ERROR,
    CANCEL_MESSAGE,
    BACK_TO_MAIN_MENU,
    CHOOSE_FROM_MENU,
    CHOOSE_HELP_CATEGORY,
    GENDER_THERAPY_MESSAGE,
    FEMINIZING_HRT_INFO,
    MASCULINIZING_HRT_INFO,
    DIY_HRT_WARNING,
    LGBT_FAMILIES_INFO,
    REPORT_ABUSE_MESSAGE,
    TRANS_FRIENDLY_ENDO_CONSULT_PROMPT,
    SURGERY_CONSULT_PROMPT,
    FTM_SURGERY_INFO,
    MTF_SURGERY_INFO,
    LEGAL_FAMILIES_CHOICE_MESSAGE,
    GENDER_THERAPY_CHOICE_MESSAGE,
    SURGERY_INFO_MESSAGE,
)
from keyboards import (
    BACK_BUTTON,
    MAIN_MENU_BUTTONS,
    HELP_MENU_BUTTONS,
    LEGAL_MENU_BUTTONS,
    LEGAL_FAMILIES_BUTTONS,
    GENDER_THERAPY_CHOICE_BUTTONS,
    MASCULINIZING_HRT_BUTTONS,
    FEMINIZING_HRT_BUTTONS,
    SURGERY_CHOICE_BUTTONS,
)
from faq_responses import FAQ_RESPONSES
from channels import CHANNELS

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.ERROR, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
(
    START,
    MAIN_MENU,
    HELP_MENU,
    TYPING,
    FAQ_LEGAL,
    FAQ_MED,
    VOLUNTEER_START,
    VOLUNTEER_NAME,
    VOLUNTEER_REGION,
    VOLUNTEER_HELP_TYPE,
    VOLUNTEER_CONTACT,
    ANONYMOUS_MESSAGE,
    LEGAL_FAMILIES_MENU,
    LEGAL_DOCUMENTS_CONSULT,
    LEGAL_PROPAGANDA_CONSULT,
    LEGAL_CONSULT,
    LEGAL_REPORT_ABUSE,
    MEDICAL_MENU,
    MEDICAL_GENDER_THERAPY_MENU,
    MEDICAL_FTM_HRT,
    MEDICAL_MTF_HRT,
    MEDICAL_F64_CONSULT,
    MEDICAL_SURGERY_MENU,
    MEDICAL_SURGERY_FTM_CONSULT,
    MEDICAL_SURGERY_MTF_CONSULT,
    MEDICAL_ENDO_CONSULT,
    MEDICAL_SURGEON_CONSULT,
) = range(27)

async def volunteer_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        await update.message.reply_text("–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –Ω–µ–±–æ–ª—å—à–æ–µ –∏–Ω—Ç–µ—Ä–≤—å—é. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
        return VOLUNTEER_NAME
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ volunteer_start: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return MAIN_MENU

async def volunteer_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data["volunteer_name"] = update.message.text
        await update.message.reply_text("–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã —Ä–µ–≥–∏–æ–Ω–∞?")
        return VOLUNTEER_REGION
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ volunteer_name: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return MAIN_MENU

async def volunteer_region(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data["volunteer_region"] = update.message.text
        keyboard = ReplyKeyboardMarkup([
            ["–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å"],
            ["–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏"],
            ["–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏"],
            ["–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ (—Ç–µ–∫—Å—Ç—ã, –º–æ–¥–µ—Ä–∞—Ü–∏—è)"],
            ["–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"],
            ["–î—Ä—É–≥–æ–µ..."],
        ], one_time_keyboard=True, resize_keyboard=True)
        await update.message.reply_text("–ö–∞–∫—É—é –ø–æ–º–æ—â—å –≤—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å?", reply_markup=keyboard)
        return VOLUNTEER_HELP_TYPE
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ volunteer_region: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return MAIN_MENU

async def volunteer_help_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data["volunteer_help_type"] = update.message.text
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à Telegram-–Ω–∏–∫ –¥–ª—è —Å–≤—è–∑–∏.")
        return VOLUNTEER_CONTACT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ volunteer_help_type: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return MAIN_MENU

async def volunteer_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data["volunteer_contact"] = update.message.text
        volunteer_info = (
            f"–ù–æ–≤—ã–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –≤–æ–ª–æ–Ω—Ç–µ—Ä:\n"
            f"–ò–º—è: {context.user_data.get('volunteer_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–†–µ–≥–∏–æ–Ω: {context.user_data.get('volunteer_region', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {context.user_data.get('volunteer_help_type', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç: @{context.user_data.get('volunteer_contact', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"
        )

        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=volunteer_info)
        keyboard = ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True)
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.", reply_markup=keyboard)

        context.user_data.clear() # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤—å—é
        return MAIN_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ volunteer_contact: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return MAIN_MENU

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        context.user_data.clear()
        await update.message.reply_text(START_MESSAGE, reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))
        return MAIN_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")
        return START

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        choice = update.message.text
        if choice == "–ü–æ–ø—Ä–æ—Å–∏—Ç—å –æ –ø–æ–º–æ—â–∏":
            await update.message.reply_text(HELP_MENU_MESSAGE, reply_markup=ReplyKeyboardMarkup(HELP_MENU_BUTTONS, resize_keyboard=True))
            return HELP_MENU
        elif choice == "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—Å—É—Ä—Å":
            await update.message.reply_text(RESOURCE_PROMPT_MESSAGE, reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True))
            context.user_data["type"] = "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞"
            return TYPING
        elif choice == "–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º":
            return await volunteer_start(update, context) # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤—å—é
        elif choice == "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç":
            await update.message.reply_text(DONATE_MESSAGE, reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True), disable_web_page_preview=True, parse_mode="HTML")
            context.user_data["type"] = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"
            return TYPING
        elif choice == "–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ":
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True))
            context.user_data["type"] = "–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            return TYPING
        else:
            await update.message.reply_text(CHOOSE_FROM_MENU)
            return MAIN_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main_menu: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")
        return MAIN_MENU

async def help_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        choice = update.message.text
        if choice == "üÜò –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å":
            await update.message.reply_text(EMERGENCY_MESSAGE, reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True), disable_web_page_preview=True, parse_mode="HTML")
            context.user_data["type"] = "–°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å"
            return TYPING
        elif choice == "üíº –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å":
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=ReplyKeyboardMarkup(LEGAL_MENU_BUTTONS, resize_keyboard=True))
            return FAQ_LEGAL
        elif choice == "üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å":
            await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=ReplyKeyboardMarkup(MEDICAL_MENU_BUTTONS, resize_keyboard=True))
            return MEDICAL_MENU
        elif choice == "üè† –ñ–∏–ª—å–µ/—Ñ–∏–Ω–∞–Ω—Å—ã":
            await update.message.reply_text(HOUSING_FINANCE_PROMPT, reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True))
            context.user_data["type"] = "–ñ–∏–ª—å–µ/—Ñ–∏–Ω–∞–Ω—Å—ã"
            return TYPING
        elif choice == "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å":
            await update.message.reply_text(PSYCHOLOGICAL_HELP_PROMPT, reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True))
            context.user_data["type"] = "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å"
            return TYPING
        elif choice == BACK_BUTTON:
            return await main_menu(update, context)
        else:
            await update.message.reply_text(CHOOSE_FROM_MENU)
            return HELP_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ help_menu: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")
        return HELP_MENU

async def faq_legal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        choice = update.message.text
        if choice == "–õ–ì–ë–¢+ —Å–µ–º—å–∏":
            await update.message.reply_text(LGBT_FAMILIES_INFO, parse_mode="HTML", reply_markup=ReplyKeyboardMarkup(LEGAL_FAMILIES_BUTTONS, resize_keyboard=True))
            return LEGAL_FAMILIES_MENU
        elif choice == "–ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã":
            response = FAQ_RESPONSES.get(choice, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            keyboard = ReplyKeyboardMarkup([["–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Å–º–µ–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"], [BACK_BUTTON]], resize_keyboard=True)
            await update.message.reply_text(response, parse_mode="HTML", reply_markup=keyboard)
            context.user_data["consultation_type"] = "—Å–º–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            return TYPING
        elif choice == "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –õ–ì–ë–¢?":
            response = FAQ_RESPONSES.get(choice, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            keyboard = ReplyKeyboardMarkup([["–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã"], [BACK_BUTTON]], resize_keyboard=True)
            await update.message.reply_text(response, parse_mode="HTML", reply_markup=keyboard)
            context.user_data["consultation_type"] = "–≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–ø–∞–≥–∞–Ω–¥—ã"
            return TYPING
        elif choice == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
            await update.message.reply_text(CONSULTATION_PROMPT, reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True))
            context.user_data["type"] = "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
            return TYPING
        elif choice == "–°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏":
            await update.message.reply_text(REPORT_ABUSE_MESSAGE, reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True))
            context.user_data["type"] = "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ (—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ)"
            return TYPING
        elif choice == BACK_BUTTON:
            return await help_menu(update, context)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")
            return FAQ_LEGAL
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ faq_legal: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")
        return FAQ_LEGAL

async def legal_families_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        choice = update.message.text
        if choice == "–õ–ì–ë–¢ —Å–µ–º—å–∏":
            await update.message.reply_text(LGBT_FAMILIES_INFO, parse_mode="HTML", reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True))
            return LEGAL_FAMILIES_MENU
        elif choice == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏—è–º":
            await update.message.reply_text(CONSULTATION_PROMPT, reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True))
            context.user_data["type"] = "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∏–º —Å–æ–≥–ª–∞—à–µ–Ω–∏—è–º"
            return TYPING
        elif choice == BACK_BUTTON:
            return await faq_legal(update, context)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")
            return LEGAL_FAMILIES_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ legal_families_menu: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")
        return LEGAL_FAMILIES_MENU

async def medical_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        choice = update.message.text
        if choice == "–ì–¢":
            await update.message.reply_text(GENDER_THERAPY_MESSAGE, reply_markup=ReplyKeyboardMarkup(GENDER_THERAPY_CHOICE_BUTTONS, resize_keyboard=True))
            return MEDICAL_GENDER_THERAPY_MENU
        elif choice == "F64":
            response = FAQ_RESPONSES.get(choice, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            keyboard = ReplyKeyboardMarkup([["–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ F64"], [BACK_BUTTON]], resize_keyboard=True)
            await update.message.reply_text(response, parse_mode="HTML", reply_markup=keyboard)
            context.user_data["consultation_type"] = "F64"
            return TYPING
        elif choice == "–û–ø–µ—Ä–∞—Ü–∏–∏":
            response = FAQ_RESPONSES.get("–ì–¥–µ –¥–µ–ª–∞—é—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏?", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            keyboard = ReplyKeyboardMarkup(SURGERY_CHOICE_BUTTONS, resize_keyboard=True)
            await update.message.reply_text(response, parse_mode="HTML", reply_markup=keyboard)
            return MEDICAL_SURGERY_MENU
        elif choice == BACK_BUTTON:
            return await help_menu(update, context)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")
            return MEDICAL_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ medical_menu: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")
        return MEDICAL_MENU

async def medical_gender_therapy_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        choice = update.message.text
        if choice == "–ú—É–∂—Å–∫–∞—è –ì–¢":
            await update.message.reply_text(MASCULINIZING_HRT_INFO, reply_markup=ReplyKeyboardMarkup([["DIY"], ["–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"], [BACK_BUTTON]], resize_keyboard=True))
            return MEDICAL_FTM_HRT
        elif choice == "–ñ–µ–Ω—Å–∫–∞—è –ì–¢":
            await update.message.reply_text(FEMINIZING_HRT_INFO, reply_markup=ReplyKeyboardMarkup([["DIY"], ["–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"], [BACK_BUTTON]], resize_keyboard=True))
            return MEDICAL_MTF_HRT
        elif choice == BACK_BUTTON:
            return await medical_menu(update, context)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")
            return MEDICAL_GENDER_THERAPY_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ medical_gender_therapy_menu: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")
        return MEDICAL_GENDER_THERAPY_MENU

async def medical_ftm_hrt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        choice = update.message.text
        if choice == "DIY":
            await update.message.reply_text(DIY_HRT_WARNING, parse_mode="HTML", reply_markup=ReplyKeyboardMarkup([["–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –º—É–∂—Å–∫–æ–π –ì–¢"], [BACK_BUTTON]], resize_keyboard=True))
            context.user_data["consultation_type"] = "–º—É–∂—Å–∫–∞—è –ì–¢ (DIY)"
            return TYPING
        elif choice == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –º—É–∂—Å–∫–æ–π –ì–¢" or choice == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
            await update.message.reply_text(TRANS_FRIENDLY_ENDO_CONSULT_PROMPT, reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True))
            context.user_data["type"] = "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –º—É–∂—Å–∫–æ–π –ì–¢"
            return TYPING
        elif choice == BACK_BUTTON:
            return await medical_gender_therapy_menu(update, context)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")
            return MEDICAL_FTM_HRT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ medical_ftm_hrt: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")
        return MEDICAL_FTM_HRT

async def medical_mtf_hrt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        choice = update.message.text
        if choice == "DIY":
            await update.message.reply_text(DIY_HRT_WARNING, parse_mode="HTML", reply_markup=ReplyKeyboardMarkup([["–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –∂–µ–Ω—Å–∫–æ–π –ì–¢"], [BACK_BUTTON]], resize_keyboard=True))
            context.user_data["consultation_type"] = "–∂–µ–Ω—Å–∫–∞—è –ì–¢ (DIY)"
            return TYPING
        elif choice == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –∂–µ–Ω—Å–∫–æ–π –ì–¢" or choice == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
            await update.message.reply_text(TRANS_FRIENDLY_ENDO_CONSULT_PROMPT, reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True))
            context.user_data["type"] = "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∂–µ–Ω—Å–∫–æ–π –ì–¢"
            return TYPING
        elif choice == BACK_BUTTON:
            return await medical_gender_therapy_menu(update, context)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")
            return MEDICAL_MTF_HRT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ medical_mtf_hrt: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")
        return MEDICAL_MTF_HRT

async def medical_surgery_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        choice = update.message.text
        if choice == "–§–¢–ú –û–ø–µ—Ä–∞—Ü–∏–∏":
            await update.message.reply_text(FTM_SURGERY_INFO, reply_markup=ReplyKeyboardMarkup([["–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –§–¢–ú –æ–ø–µ—Ä–∞—Ü–∏—è–º"], [BACK_BUTTON]], resize_keyboard=True))
            context.user_data["consultation_type"] = "–§–¢–ú –æ–ø–µ—Ä–∞—Ü–∏–∏"
            return TYPING
        elif choice == "–ú–¢–§ –û–ø–µ—Ä–∞—Ü–∏–∏":
            await update.message.reply_text(MTF_SURGERY_INFO, reply_markup=ReplyKeyboardMarkup([["–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –ú–¢–§ –æ–ø–µ—Ä–∞—Ü–∏—è–º"], [BACK_BUTTON]], resize_keyboard=True))
            context.user_data["consultation_type"] = "–ú–¢–§ –æ–ø–µ—Ä–∞—Ü–∏–∏"
            return TYPING
        elif choice == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Ö–∏—Ä—É—Ä–≥–∞":
            await update.message.reply_text(SURGERY_CONSULT_PROMPT, reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True))
            context.user_data["type"] = "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Ö–∏—Ä—É—Ä–≥–∞"
            return TYPING
        elif choice == BACK_BUTTON:
            return await medical_menu(update, context)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")
            return MEDICAL_SURGERY_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ medical_surgery_menu: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")
        return MEDICAL_SURGERY_MENU

async def handle_typing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message_text = update.message.text
    if message_text == BACK_BUTTON:
        current_state = context.user_data.get("current_state")
        if current_state == FAQ_LEGAL:
            return await faq_legal(update, context)
        elif current_state == MEDICAL_MENU:
            return await medical_menu(update, context)
        elif current_state == LEGAL_FAMILIES_MENU:
            return await legal_families_menu(update, context)
        elif current_state == MEDICAL_GENDER_THERAPY_MENU:
            return await medical_gender_therapy_menu(update, context)
        elif current_state == MEDICAL_FTM_HRT:
            return await medical_ftm_hrt(update, context)
        elif current_state == MEDICAL_MTF_HRT:
            return await medical_mtf_hrt(update, context)
        elif current_state == MEDICAL_SURGERY_MENU:
            return await medical_surgery_menu(update, context)
        else:
            return await main_menu(update, context)

    request_type = context.user_data.get("type", "–°–æ–æ–±—â–µ–Ω–∏–µ")
    consultation_type = context.user_data.get("consultation_type")
    username = update.message.from_user.username or "–Ω–µ—Ç"
    forward_text = f"üì© {request_type}"
    if consultation_type:
        forward_text += f" ({consultation_type})"
    forward_text += f"\n–û—Ç @{username}\n\n{message_text}"
    target_channel_id = ADMIN_CHAT_ID

    if "–°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å" in request_type:
        target_channel_id = CHANNELS["–°—Ä–æ—á–Ω–∞—è"]
        admin_notification = f"üö® –ù–û–í–´–ô –°–†–û–ß–ù–´–ô –ó–ê–ü–†–û–°!\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}"
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_notification, parse_mode="HTML")
    elif "–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ" in request_type:
        target_channel_id = CHANNELS["–ê–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"]
        forward_text = f"ü§´ –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n{message_text}"
    elif "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞" in request_type:
        target_channel_id = CHANNELS["–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞"]
    elif "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å" in request_type:
        target_channel_id = CHANNELS["–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å"]
    elif "–ñ–∏–ª—å–µ/—Ñ–∏–Ω–∞–Ω—Å—ã" in request_type:
        pass # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    elif "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" in request_type or consultation_type:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=forward_text)
        await update.message.reply_text(MESSAGE_SENT_SUCCESS, reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))
        return MAIN_MENU
    elif "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏" in request_type:
        await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=forward_text)
        await update.message.reply_text(MESSAGE_SENT_SUCCESS, reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))
        return MAIN_MENU
    else:
        await context.bot.send_message(chat_id=target_channel_id, text=forward_text)
        await update.message.reply_text(MESSAGE_SENT_SUCCESS, reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))
        return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    try:
        await update.message.reply_text(CANCEL_MESSAGE, reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))
        return START
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")
        return START

def main():
    app = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            START: [CommandHandler("start", start)],
            MAIN_MENU: [MessageHandler(Filters.TEXT & ~Filters.COMMAND, main_menu)],
            HELP_MENU: [MessageHandler(Filters.TEXT & ~Filters.COMMAND, help_menu)],
            FAQ_LEGAL: [MessageHandler(Filters.TEXT & ~Filters.COMMAND, faq_legal)],
            LEGAL_FAMILIES_MENU: [MessageHandler(Filters.TEXT & ~Filters.COMMAND, legal_families_menu)],
            MEDICAL_MENU: [MessageHandler(Filters.TEXT & ~Filters.COMMAND, medical_menu)],
            MEDICAL_GENDER_THERAPY_MENU: [MessageHandler(Filters.TEXT & ~Filters.COMMAND, medical_gender_therapy_menu)],
            MEDICAL_FTM_HRT: [MessageHandler(Filters.TEXT & ~Filters.COMMAND, medical_ftm_hrt)],
            MEDICAL_MTF_HRT: [MessageHandler(Filters.TEXT & ~Filters.COMMAND, medical_mtf_hrt)],
            MEDICAL_SURGERY_MENU: [MessageHandler(Filters.TEXT & ~Filters.COMMAND, medical_surgery_menu)],
            TYPING: [MessageHandler(Filters.TEXT & ~Filters.COMMAND, handle_typing)],
            VOLUNTEER_START: [MessageHandler(Filters.TEXT & ~Filters.COMMAND, volunteer_start)],
            VOLUNTEER_NAME: [MessageHandler(Filters.TEXT & ~Filters.COMMAND, volunteer_name)],
            VOLUNTEER_REGION: [MessageHandler(Filters.TEXT & ~Filters.COMMAND, volunteer_region)],
            VOLUNTEER_HELP_TYPE: [MessageHandler(Filters.TEXT & ~Filters.COMMAND, volunteer_help_type)],
            VOLUNTEER_CONTACT: [MessageHandler(Filters.TEXT & ~Filters.COMMAND, volunteer_contact)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
