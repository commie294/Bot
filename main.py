# -*- coding: utf-8 -*-
import logging
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes, ConversationHandler, MessageHandler, filters, CallbackContext, JobQueue
from telegram import ReplyKeyboardMarkup
from dotenv import load_dotenv
import gspread
from google.oauth2.service_account import Credentials
from telegram.constants import ParseMode
from google.oauth2 import service_account
from google.auth.transport.requests import Request

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ ID —á–∞—Ç–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
GSHEET_URL = os.getenv("GSHEET_URL")
VOLUNTEER_NOTIFICATION_CHAT_ID = os.getenv("VOLUNTEER_NOTIFICATION_CHAT_ID")

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
START, MAIN_MENU, HELP_MENU, TYPING, FAQ_LEGAL, FAQ_MED = range(6)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
MAIN_MENU_BUTTONS = [['–ü–æ–ø—Ä–æ—Å–∏—Ç—å –æ –ø–æ–º–æ—â–∏'], ['–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—Å—É—Ä—Å'], ['–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º'], ['–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç']]
HELP_MENU_BUTTONS = [['üÜò –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å'], ['üíº –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å'], ['üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å'], ['üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å'], ['üè† –ñ–∏–ª—å–µ/—Ñ–∏–Ω–∞–Ω—Å—ã'], ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']]
LEGAL_FAQ_BUTTONS = [['–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∂–µ–Ω—Ü–∞?'], ['–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–±–µ–∂–∏—â–µ?'], ['–ù—É–∂–Ω–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'], ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']]
MEDICAL_FAQ_BUTTONS = [['–ì–¥–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –ø–æ–º–æ—â—å?'], ['–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–º—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é?'], ['–ù—É–∂–Ω–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è'], ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']]
BACK_BUTTON = '‚¨ÖÔ∏è –ù–∞–∑–∞–¥'

# –°–æ–æ–±—â–µ–Ω–∏—è
START_MESSAGE = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ß–µ–º —è –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?"
HELP_MENU_MESSAGE = "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–º–æ—â–∏:"
RESOURCE_PROMPT_MESSAGE = "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Ä–µ—Å—É—Ä—Å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:"
VOLUNTEER_MESSAGE = "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏ –∏ –∫–∞–∫ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–º–æ—á—å."
DONATE_MESSAGE = "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—à –ø—Ä–æ–µ–∫—Ç, –ø–µ—Ä–µ–π–¥—è –ø–æ [—Å—Å—ã–ª–∫–µ](https://example.com/donate)." # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
EMERGENCY_MESSAGE = "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å—Ä–æ—á–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é:"
PSYCHOLOGICAL_HELP_PROMPT = "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å –≤–∞–º –Ω—É–∂–Ω–∞:"
HOUSING_FINANCE_PROMPT = "–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –∂–∏–ª—å–µ –∏–ª–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ø–æ–º–æ—â–∏:"
CHOOSE_FROM_MENU = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é."
CHOOSE_HELP_CATEGORY = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–º–æ—â–∏."
MESSAGE_SENT_SUCCESS = "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!"
MESSAGE_SEND_ERROR = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {}"
CANCEL_MESSAGE = "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
BACK_TO_MAIN_MENU = "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
CONSULTATION_PROMPT = "–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏:"

# ID –∫–∞–Ω–∞–ª–æ–≤
CHANNELS = {
    "–°—Ä–æ—á–Ω–∞—è": os.getenv("URGENT_CHANNEL_ID"),
    "–ê–Ω–æ–Ω–∏–º–Ω—ã–µ": os.getenv("ANONYMOUS_CHANNEL_ID"),
    "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ": os.getenv("LEGAL_CHANNEL_ID"),
    "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ": os.getenv("MEDICAL_CHANNEL_ID"),
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å": os.getenv("PSYCHOLOGICAL_CHANNEL_ID"),
    "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞": os.getenv("RESOURCE_OFFER_CHANNEL_ID"),
    "–í–æ–ª–æ–Ω—Ç–µ—Ä—ã –û—Å—Ç–∞–ª—å–Ω—ã–µ": os.getenv("VOLUNTEERS_OTHER_CHANNEL_ID"),
    "–í–æ–ª–æ–Ω—Ç–µ—Ä—ã –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è": os.getenv("VOLUNTEERS_PSYCHOLOGY_CHANNEL_ID"),
    "–í–æ–ª–æ–Ω—Ç–µ—Ä—ã –Æ—Ä–∏—Å—Ç—ã": os.getenv("VOLUNTEERS_LAWYERS_CHANNEL_ID"),
    "–í–æ–ª–æ–Ω—Ç–µ—Ä—ã –ò–Ω—Ñ–æ": os.getenv("VOLUNTEERS_INFO_CHANNEL_ID"),
}

# FAQ –æ—Ç–≤–µ—Ç—ã
FAQ_RESPONSES = {
    "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∂–µ–Ω—Ü–∞?": "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–µ–∂–µ–Ω—Ü–∞ –æ–±—ã—á–Ω–æ —Ç—Ä–µ–±—É—é—Ç—Å—è [—Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤](https://example.com/refugee_docs).", # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —É–±–µ–∂–∏—â–µ?": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —É–±–µ–∂–∏—â–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ [—Å—Å—ã–ª–∫–µ](https://example.com/temporary_shelter).", # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    "–ì–¥–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—É—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –ø–æ–º–æ—â—å?": "–ë–ª–∏–∂–∞–π—à–∏–µ –ø—É–Ω–∫—Ç—ã –æ–∫–∞–∑–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â–∏ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ [–∑–¥–µ—Å—å](https://example.com/medical_help).", # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
    "–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–º—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é?": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–µ –∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–º—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—é –¥–æ—Å—Ç—É–ø–Ω–∞ [–ø–æ —Å—Å—ã–ª–∫–µ](https://example.com/medical_access).", # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ Google Sheets
LAST_PROCESSED_ROW = 1

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets
def get_gsheet_client():
    creds = None
    if os.path.exists('token.json'):
        creds = service_account.Credentials.from_service_account_file('token.json', scopes=['https://www.googleapis.com/auth/spreadsheets'])
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            creds = service_account.Credentials.from_service_account_file(
                'rapid-goal-457809-n6-9e1bda1dc23c.json',
                scopes=['https://www.googleapis.com/auth/spreadsheets']
            )
    gc = gspread.authorize(creds)
    return gc

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
def get_gsheet_data():
    try:
        gc = get_gsheet_client()
        spreadsheet = gc.open_by_url(GSHEET_URL)
        worksheet = spreadsheet.sheet1
        data = worksheet.get_all_records()
        return data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets: {e}", exc_info=True)
        return None

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤
async def process_new_volunteers(context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –≤ Google Sheets –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è."""
    global LAST_PROCESSED_ROW
    new_volunteers_data = get_gsheet_data()
    if new_volunteers_data:
        for i, volunteer_data in enumerate(new_volunteers_data):
            row_number = i + 2
            if row_number > LAST_PROCESSED_ROW:
                help_direction = volunteer_data.get("d")
                target_chat_id = CHANNELS.get("–í–æ–ª–æ–Ω—Ç–µ—Ä—ã –û—Å—Ç–∞–ª—å–Ω—ã–µ")
                if help_direction == "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å":
                    target_chat_id = CHANNELS.get("–í–æ–ª–æ–Ω—Ç–µ—Ä—ã –ü—Å–∏—Ö–æ–ª–æ–≥–∏—è")
                elif help_direction == "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å":
                    target_chat_id = CHANNELS.get("–í–æ–ª–æ–Ω—Ç–µ—Ä—ã –Æ—Ä–∏—Å—Ç—ã")
                elif help_direction == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞":
                    target_chat_id = CHANNELS.get("–í–æ–ª–æ–Ω—Ç–µ—Ä—ã –ò–Ω—Ñ–æ")
                volunteer_info = f"–ù–æ–≤—ã–π –≤–æ–ª–æ–Ω—Ç–µ—Ä (ID: {row_number})!\n\n"
                for key, value in volunteer_data.items():
                    volunteer_info += f"{key}: {value}\n"

                try:
                    await context.bot.send_message(chat_id=target_chat_id, text=volunteer_info)
                    LAST_PROCESSED_ROW = row_number
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–æ–ª–æ–Ω—Ç–µ—Ä–µ: {e}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text(START_MESSAGE, reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))
    return MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    if choice == "–ü–æ–ø—Ä–æ—Å–∏—Ç—å –æ –ø–æ–º–æ—â–∏":
        await update.message.reply_text(HELP_MENU_MESSAGE, reply_markup=ReplyKeyboardMarkup(HELP_MENU_BUTTONS, resize_keyboard=True))
        return HELP_MENU
    elif choice == "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—Å—É—Ä—Å":
        context.user_data["type"] = "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞"
        await update.message.reply_text(RESOURCE_PROMPT_MESSAGE, reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True))
        return TYPING
    elif choice == "–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º":
        context.user_data["type"] = "–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º"
        await update.message.reply_text("–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç—É [–∞–Ω–∫–µ—Ç—É](https://docs.google.com/forms/d/e/1FAIpQLSdj4lm6Z_nsvZh6zAWnk0ob8p6hvG6fxVQV5kYrcdXTVjpbaA/viewform?usp=dialog), —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º.",
                                        reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True),
                                        parse_mode=ParseMode.MARKDOWN,
                                        disable_web_page_preview=True)
        return TYPING
    elif choice == "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç":
        await update.message.reply_text(DONATE_MESSAGE, reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True), parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True)
        return TYPING
    else:
        await update.message.reply_text(CHOOSE_FROM_MENU)
        return MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø–æ–º–æ—â–∏
async def help_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    if choice == "üÜò –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å":
        await update.message.reply_text(EMERGENCY_MESSAGE, reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True), disable_web_page_preview=True)
        context.user_data["type"] = "–°—Ä–æ—á–Ω–∞—è"
        return TYPING
    elif choice == "üíº –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=ReplyKeyboardMarkup(LEGAL_FAQ_BUTTONS, resize_keyboard=True))
        return FAQ_LEGAL
    elif choice == "üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å":
        context.user_data["type"] = "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è"
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=ReplyKeyboardMarkup(MEDICAL_FAQ_BUTTONS, resize_keyboard=True))
        return FAQ_MED
    elif choice == "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å":
        context.user_data["type"] = "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å"
        await update.message.reply_text(PSYCHOLOGICAL_HELP_PROMPT, reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True))
        return TYPING
    elif choice == "üè† –ñ–∏–ª—å–µ/—Ñ–∏–Ω–∞–Ω—Å—ã":
        context.user_data["type"] = "–ñ–∏–ª—å–µ/—Ñ–∏–Ω–∞–Ω—Å—ã"
        await update.message.reply_text(HOUSING_FINANCE_PROMPT, reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True))
        return TYPING
    elif choice == BACK_BUTTON:
        return await start(update, context)
    else:
        await update.message.reply_text(CHOOSE_HELP_CATEGORY)
        return HELP_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ FAQ (—é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ)
async def handle_faq(update: Update, context: ContextTypes.DEFAULT_TYPE, faq_type: str) -> int:
    question = update.message.text
    if question == BACK_BUTTON:
        await update.message.reply_text(HELP_MENU_MESSAGE, reply_markup=ReplyKeyboardMarkup(HELP_MENU_BUTTONS, resize_keyboard=True))
        return HELP_MENU
    elif "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" in question:
        context.user_data["type"] = f"{faq_type.capitalize()} –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
        await update.message.reply_text(CONSULTATION_PROMPT, reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True))
        return TYPING
    else:
        response = FAQ_RESPONSES.get(question, "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
        return FAQ_LEGAL if faq_type == "—é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è" else FAQ_MED

async def handle_legal_faq(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await handle_faq(update, context, "—é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è")

async def handle_medical_faq(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await handle_faq(update, context, "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message_text = update.message.text
    if message_text == BACK_BUTTON:
        await update.message.reply_text(BACK_TO_MAIN_MENU, reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))
        return MAIN_MENU

    request_type = context.user_data.get("type", "–ó–∞–ø—Ä–æ—Å")
    username = update.message.from_user.username or "–Ω–µ—Ç"
    forward_text = f"üì© {request_type}\n–û—Ç @{username}\n\n{message_text}"

    target_channel_id = ADMIN_CHAT_ID  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É

    if "–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º" in request_type:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç—É [–∞–Ω–∫–µ—Ç—É](https://docs.google.com/forms/d/e/1FAIpQLSdj4lm6Z_nsvZh6zAWnk0ob8p6hvG6fxVQV5kYrcdXTVjpbaA/viewform?usp=dialog), —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º.",
                                        reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True),
                                        parse_mode=ParseMode.MARKDOWN,
                                        disable_web_page_preview=True)
        return MAIN_MENU
    elif "–°—Ä–æ—á–Ω–∞—è" in request_type:
        target_channel_id = CHANNELS.get("–°—Ä–æ—á–Ω–∞—è")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admin_notification = f"üö® –ù–û–í–´–ô –°–†–û–ß–ù–´–ô –ó–ê–ü–†–û–°!\n–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{username}\n–°–æ–æ–±—â–µ–Ω–∏–µ: {message_text}"
        try:
            await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=admin_notification)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ —Å—Ä–æ—á–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ: {e}", exc_info=True)
    elif "–ê–Ω–æ–Ω–∏–º–Ω–æ–µ" in request_type:
        target_channel_id = CHANNELS.get("–ê–Ω–æ–Ω–∏–º–Ω—ã–µ")
    elif "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è" in request_type:
        target_channel_id = CHANNELS.get("–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ")
    elif "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è" in request_type:
        target_channel_id = CHANNELS.get("–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ")
    elif "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å" in request_type:
        target_channel_id = CHANNELS.get("–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å")
    elif "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞" in request_type:
        target_channel_id = CHANNELS.get("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞")
    elif "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" in request_type:
        target_channel_id = CHANNELS.get("–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ")
    elif "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" in request_type:
        target_channel_id = CHANNELS.get("–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ")
    elif "–ñ–∏–ª—å–µ/—Ñ–∏–Ω–∞–Ω—Å—ã" in request_type:
        target_channel_id = CHANNELS.get("–°—Ä–æ—á–Ω–∞—è") # –†–µ—à–∏–ª –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–∫–∞ –≤ "–°—Ä–æ—á–Ω–∞—è", –ª–æ–≥–∏–∫—É –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å

    if target_channel_id:
        try:
            await context.bot.send_message(chat_id=target_channel_id, text=forward_text)
            await update.message.reply_text(MESSAGE_SENT_SUCCESS, reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            await update.message.reply_text(MESSAGE_SEND_ERROR.format(e), reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))
    return MAIN_MENU

async def unknown(update: Update, context: ContextTypes.
DEFAULT_TYPE)) -> None:
    await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")

def main() -> None:
    """Run the bot."""
    # Create the Application and pass it your bot's token.
    application = Application.builder().token(TOKEN).build()

    # Set up conversation handler
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)],
            HELP_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, help_menu)],
            TYPING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)],
            FAQ_LEGAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_legal_faq)],
            FAQ_MED: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_medical_faq)],
        },
        fallbacks=[CommandHandler('cancel', lambda update, context: update.message.reply_text(CANCEL_MESSAGE))]
    )

    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.COMMAND, unknown))

    # –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–≤
    async def job_callback(context: CallbackContext):
        await process_new_volunteers(context)

    job_queue = application.job_queue
    job_queue.run_repeating(job_callback, interval=300, first=5) # –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç (300 —Å–µ–∫—É–Ω–¥)

    # Run the bot until the user presses Ctrl-C
    application.run_polling()

if __name__ == '__main__':
    main()
