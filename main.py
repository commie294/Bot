from dotenv import load_dotenv
import os
import asyncio
import hashlib
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
)
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import ContextTypes
import logging
from bot_responses import (
    START_MESSAGE,
    HELP_MENU_MESSAGE,
    RESOURCE_PROMPT_MESSAGE,
    VOLUNTEER_MESSAGE,
    DONATE_MESSAGE,
    EMERGENCY_MESSAGE,
    HOUSING_FINANCE_PROMPT,
    PSYCHOLOGICAL_HELP_PROMPT,
    CONSULTATION_PROMPT,
    MESSAGE_SENT_SUCCESS,
    MESSAGE_SEND_ERROR,
    CANCEL_MESSAGE,
    BACK_TO_MAIN_MENU,
    CHOOSE_FROM_MENU,
    CHOOSE_HELP_CATEGORY,
    GENDER_THERAPY_MESSAGE,
    FEMINIZING_HRT_INFO,
    MASCULINIZING_HRT_INFO,
    DIY_HRT_WARNING,
    LGBT_FAMILIES_INFO,
    REPORT_ABUSE_MESSAGE,
    FTM_SURGERY_INFO,
    MTF_SURGERY_INFO,
    GENDER_THERAPY_CHOICE_MESSAGE,
    SURGERY_INFO_MESSAGE,
    DOCUMENTS_MESSAGE,
    PROPAGANDA_MESSAGE,
    F64_MESSAGE,
    DIY_HRT_GUIDE_LINK,
    DIY_HRT_GUIDE_NAME,
    SURGERY_PLANNING_PROMPT,
    FAREWELL_MESSAGE,
    ANONYMOUS_CONFIRMATION
)
from keyboards import (
    MAIN_MENU_BUTTONS,
    HELP_MENU_BUTTONS,
    LEGAL_MENU_BUTTONS,
    MEDICAL_MENU_BUTTONS,
    GENDER_THERAPY_CHOICE_BUTTONS,
    BACK_BUTTON,
    SURGERY_INFO_KEYBOARD,
    VOLUNTEER_HELP_TYPE_KEYBOARD,
)
from channels import CHANNELS

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

(
    START,
    MAIN_MENU,
    HELP_MENU,
    TYPING,
    FAQ_LEGAL,
    MEDICAL_MENU,
    VOLUNTEER_START_STATE,
    VOLUNTEER_NAME,
    VOLUNTEER_REGION,
    VOLUNTEER_HELP_TYPE,
    VOLUNTEER_CONTACT,
    ANONYMOUS_MESSAGE,
    MEDICAL_GENDER_THERAPY_MENU,
    MEDICAL_FTM_HRT,
    MEDICAL_MTF_HRT,
    MEDICAL_SURGERY_PLANNING,
    DONE,
) = range(17)

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
HASH_SALT = os.getenv("HASH_SALT", "default_salt")

def generate_message_id(user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö–µ—à –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    return hashlib.sha256(f"{HASH_SALT}_{user_id}_{os.urandom(16)}".encode()).hexdigest()[:8]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        START_MESSAGE,
        reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True),
        parse_mode="Markdown",
    )
    return MAIN_MENU

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_choice = update.message.text
    if user_choice == "üÜò –ü–æ–ø—Ä–æ—Å–∏—Ç—å –æ –ø–æ–º–æ—â–∏":
        await update.message.reply_text(
            HELP_MENU_MESSAGE,
            reply_markup=ReplyKeyboardMarkup(HELP_MENU_BUTTONS + [["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
            parse_mode="Markdown",
        )
        return HELP_MENU
    elif user_choice == "‚ûï –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—Å—É—Ä—Å":
        context.user_data["request_type"] = "–†–µ—Å—É—Ä—Å"
        await update.message.reply_text(RESOURCE_PROMPT_MESSAGE, reply_markup=ReplyKeyboardMarkup([["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True))
        return TYPING
    elif user_choice == "ü§ù –°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º":
        await update.message.reply_text(VOLUNTEER_MESSAGE, reply_markup=ReplyKeyboardMarkup([["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True))
        return VOLUNTEER_START_STATE
    elif user_choice == "üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç":
        context.user_data["request_type"] = "–î–æ–Ω–∞—Ç"
        await update.message.reply_text(
            DONATE_MESSAGE, parse_mode="Markdown", disable_web_page_preview=True, reply_markup=ReplyKeyboardMarkup([["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True)
        )
        return MAIN_MENU
    elif user_choice == "‚úâÔ∏è –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ":
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
            reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
        )
        context.user_data["request_type"] = "–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        return ANONYMOUS_MESSAGE
    elif user_choice == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        await update.message.reply_text(FAREWELL_MESSAGE, reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    else:
        await update.message.reply_text(CHOOSE_FROM_MENU)
        return MAIN_MENU

async def help_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_choice = update.message.text
    if user_choice == BACK_BUTTON:
        await update.message.reply_text(
            BACK_TO_MAIN_MENU,
            reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True),
        )
        return MAIN_MENU
    elif user_choice == "üö® –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å":
        context.user_data["request_type"] = "–°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å"
        await update.message.reply_text(EMERGENCY_MESSAGE, reply_markup=ReplyKeyboardMarkup([["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True))
        return TYPING
    elif user_choice == "üè† –ñ–∏–ª—å–µ/—Ñ–∏–Ω–∞–Ω—Å—ã":
        context.user_data["request_type"] = "–ñ–∏–ª—å–µ/—Ñ–∏–Ω–∞–Ω—Å—ã"
        await update.message.reply_text(HOUSING_FINANCE_PROMPT, reply_markup=ReplyKeyboardMarkup([["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True))
        return TYPING
    elif user_choice == "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å":
        context.user_data["request_type"] = "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å"
        await update.message.reply_text(PSYCHOLOGICAL_HELP_PROMPT, reply_markup=ReplyKeyboardMarkup([["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True))
        return TYPING
    elif user_choice == "ü©∫ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â–∏:",
            reply_markup=ReplyKeyboardMarkup(MEDICAL_MENU_BUTTONS + [["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
        )
        return MEDICAL_MENU
    elif user_choice == "‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å":
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏:",
            reply_markup=ReplyKeyboardMarkup(LEGAL_MENU_BUTTONS + [["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
        )
        return FAQ_LEGAL
    elif user_choice == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        await update.message.reply_text(FAREWELL_MESSAGE, reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    else:
        await update.message.reply_text(CHOOSE_HELP_CATEGORY)
        return HELP_MENU

async def handle_typing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_text = update.message.text
    request_type = context.user_data.get("request_type", "–°–æ–æ–±—â–µ–Ω–∏–µ")

    # –î–ª—è –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    if request_type == "–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ":
        return await anonymous_message(update, context)

    user_id = update.effective_user.id
    channel_mapping = {
        "–†–µ—Å—É—Ä—Å": "t64_misc",
        "–°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å": "t64_gen",
        "–ü–æ–º–æ—â—å - –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ (—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ)": "t64_legal",
        "–ü–æ–º–æ—â—å - –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è": "t64_legal",
        "–ü–æ–º–æ—â—å - –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è": "t64_gen",
        "–ü–æ–º–æ—â—å - –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –º—É–∂—Å–∫–æ–π –ì–¢": "t64_gen",
        "–ü–æ–º–æ—â—å - –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∂–µ–Ω—Å–∫–æ–π –ì–¢": "t64_gen",
        "–ü–æ–º–æ—â—å - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏": "t64_gen",
        "–ü–æ–º–æ—â—å - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –§–¢–ú –æ–ø–µ—Ä–∞—Ü–∏–∏": "t64_gen",
        "–ü–æ–º–æ—â—å - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–¢–§ –æ–ø–µ—Ä–∞—Ü–∏–∏": "t64_gen",
        "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å": "t64_psych",
        "–ñ–∏–ª—å–µ/—Ñ–∏–Ω–∞–Ω—Å—ã": "t64_gen",
    }

    channel_name = channel_mapping.get(request_type)
    if channel_name:
        try:
            await context.bot.send_message(
                chat_id=CHANNELS.get(channel_name),
                text=f"–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n{user_text}"
            )
            await update.message.reply_text(
                MESSAGE_SENT_SUCCESS,
                reply_markup=ReplyKeyboardMarkup([["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
            )
            return MAIN_MENU
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            await update.message.reply_text(
                MESSAGE_SEND_ERROR,
                reply_markup=ReplyKeyboardMarkup([["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
            )
            return MAIN_MENU
    else:
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
            reply_markup=ReplyKeyboardMarkup([["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
        )
        return MAIN_MENU

async def anonymous_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = update.message.text
    message_id = generate_message_id(update.effective_user.id)

    try:
        await context.bot.send_message(
            chat_id=CHANNELS.get("t64_misc"),
            text=f"üîí –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ [{message_id}]:\n\n{message}"
        )
        await update.message.reply_text(
            ANONYMOUS_CONFIRMATION,
            reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
        )
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if "request_type" in context.user_data:
            del context.user_data["request_type"]
        return MAIN_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
        )
        return MAIN_MENU

async def faq_legal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    if choice == BACK_BUTTON:
        await update.message.reply_text(
            BACK_TO_MAIN_MENU,
            reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True),
        )
        return MAIN_MENU
    elif choice == "üè≥Ô∏è‚Äçüåà –õ–ì–ë–¢+ —Å–µ–º—å–∏":
        await update.message.reply_text(
            LGBT_FAMILIES_INFO,
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
        )
        return FAQ_LEGAL
    elif choice == "üìù –ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã":
        response = DOCUMENTS_MESSAGE
        keyboard = ReplyKeyboardMarkup(
            [["–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Å–º–µ–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"], [BACK_BUTTON], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]],
            resize_keyboard=True,
        )
        await update.message.reply_text(response, parse_mode="Markdown", reply_markup=keyboard)
        context.user_data["request_type"] = "–ü–æ–º–æ—â—å - –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (—Å–º–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)"
        return TYPING
    elif choice == "üì¢ –ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –õ–ì–ë–¢?":
        response = PROPAGANDA_MESSAGE
        keyboard = ReplyKeyboardMarkup([[BACK_BUTTON], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True)
        await update.message.reply_text(response, parse_mode="Markdown", reply_markup=keyboard)
        return FAQ_LEGAL
    elif choice == "üó£Ô∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
        await update.message.reply_text(
            CONSULTATION_PROMPT,
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
        )
        context.user_data["request_type"] = "–ü–æ–º–æ—â—å - –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
        return TYPING
    elif choice == "üö® –°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏":
        await update.message.reply_text(
            REPORT_ABUSE_MESSAGE,
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
        )
        context.user_data["request_type"] = "–ü–æ–º–æ—â—å - –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ (—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ)"
        return TYPING
    elif choice == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        await update.message.reply_text(FAREWELL_MESSAGE, reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")
        return FAQ_LEGAL

async def medical_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    if choice == BACK_BUTTON:
        await update.message.reply_text(
            HELP_MENU_MESSAGE,
            reply_markup=ReplyKeyboardMarkup(HELP_MENU_BUTTONS + [["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
        )
        return HELP_MENU
    elif choice == "üó£Ô∏è –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
        await update.message.reply_text(
            CONSULTATION_PROMPT,
            reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
        )
        context.user_data["request_type"] = "–ü–æ–º–æ—â—å - –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
        return TYPING
    elif choice == "üíâHRT":
        await update.message.reply_text(
            GENDER_THERAPY_MESSAGE,
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup(
                GENDER_THERAPY_CHOICE_BUTTONS + [["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True
            ),
        )
        return MEDICAL_GENDER_THERAPY_MENU
    elif choice == "‚ùì F64":
        await update.message.reply_text(
            F64_MESSAGE,
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
        )
        return MEDICAL_MENU
    elif choice == "‚öïÔ∏è –û–ø–µ—Ä–∞—Ü–∏–∏":
        await update.message.reply_text(
            SURGERY_INFO_MESSAGE,
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup(SURGERY_INFO_KEYBOARD.keyboard + [["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
        )
        return MEDICAL_SURGERY_PLANNING
    elif choice == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        await update.message.reply_text(FAREWELL_MESSAGE, reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")
        return MEDICAL_MENU

async def medical_gender_therapy_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    if choice == BACK_BUTTON:
        return await medical_menu(update, context)
    elif choice == "T":
        await update.message.reply_text(
            MASCULINIZING_HRT_INFO,
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup(
                [
                    ["DIY"],
                    ["–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –º—É–∂—Å–∫–æ–π –ì–¢"],
                    [BACK_BUTTON],
                    ["‚úÖ –ì–æ—Ç–æ–≤–æ"],
                ],
                resize_keyboard=True,
            ),
        )
        return MEDICAL_FTM_HRT
    elif choice == "E":
        await update.message.reply_text(
            FEMINIZING_HRT_INFO,
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup(
                [
                    ["DIY"],
                    ["–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –∂–µ–Ω—Å–∫–æ–π –ì–¢"],
                    [BACK_BUTTON],
                    ["‚úÖ –ì–æ—Ç–æ–≤–æ"],
                ],
                resize_keyboard=True,
            ),
        )
        return MEDICAL_MTF_HRT
    elif choice == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        await update.message.reply_text(FAREWELL_MESSAGE, reply_markup=ReplyKeyboardRemove())
        return ConversationHandler.END
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")
        return MEDICAL_GENDER_THERAPY_MENU

async def medical_ftm_hrt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    if choice == BACK_BUTTON:
        return await medical_gender_therapy_menu(update, context)
    elif choice == "DIY":
        keyboard = ReplyKeyboardMarkup(
            [["–Ø –ø–æ–Ω–∏–º–∞—é —Ä–∏—Å–∫–∏, —Å–∫–∞—á–∞—Ç—å –≥–∞–π–¥"], [BACK_BUTTON], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True
        )
        await update.message.reply_text(
            DIY_HRT_WARNING, parse_mode="Markdown", reply_markup=keyboard
        )
        return MEDICAL_FTM_HRT
    elif choice == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –º—É–∂—Å–∫–æ–π –ì–¢":
        await update.message.reply_text(
            CONSULTATION_PROMPT,
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
        )
        context.user_data["request_type"] = "–ü–æ–º–æ—â—å - –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –º—É–∂—Å–∫–æ–π –ì–¢"
        return TYPING
    elif choice == "–Ø –ø–æ–Ω–∏–º–∞—é —Ä–∏—Å–∫–∏, —Å–∫–∞—á–∞—Ç—å –≥–∞–π–¥":
        link = DIY_HRT_GUIDE_LINK
        file_name = DIY_HRT_GUIDE_NAME
        await update.message.reply_text(
            f"–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≥–∞–π–¥ –ø–æ DIY –ì–¢: [{file_name}]({link})",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup(
                [["–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –º—É–∂—Å–∫–æ–π –ì–¢"], [BACK_BUTTON], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]],
                resize_keyboard=True,
            ),
            disable_web_page_preview=True,
        )
        return MEDICAL_FTM_HRT
    elif choice == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        return await medical_gender_therapy_menu(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")
        return MEDICAL_FTM_HRT

async def medical_mtf_hrt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    if choice == BACK_BUTTON:
        return await medical_gender_therapy_menu(update, context)
    elif choice == "DIY":
        keyboard = ReplyKeyboardMarkup(
            [["–Ø –ø–æ–Ω–∏–º–∞—é —Ä–∏—Å–∫–∏, —Å–∫–∞—á–∞—Ç—å –≥–∞–π–¥"], [BACK_BUTTON], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True
        )
        await update.message.reply_text(
            DIY_HRT_WARNING, parse_mode="Markdown", reply_markup=keyboard
        )
        return MEDICAL_MTF_HRT
    elif choice == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –∂–µ–Ω—Å–∫–æ–π –ì–¢":
        await update.message.reply_text(
            CONSULTATION_PROMPT,
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
        )
        context.user_data["request_type"] = "–ü–æ–º–æ—â—å - –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∂–µ–Ω—Å–∫–æ–π –ì–¢"
        return TYPING
    elif choice == "–Ø –ø–æ–Ω–∏–º–∞—é —Ä–∏—Å–∫–∏, —Å–∫–∞—á–∞—Ç—å –≥–∞–π–¥":
        link = DIY_HRT_GUIDE_LINK
        file_name = DIY_HRT_GUIDE_NAME
        await update.message.reply_text(
            f"–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≥–∞–π–¥ –ø–æ DIY –ì–¢: [{file_name}]({link})",
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardMarkup(
                [["–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –∂–µ–Ω—Å–∫–æ–π –ì–¢"], [BACK_BUTTON], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]],
                resize_keyboard=True,
            ),
            disable_web_page_preview=True,
        )
        return MEDICAL_MTF_HRT
    elif choice == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        return await medical_gender_therapy_menu(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")
        return MEDICAL_MTF_HRT

async def medical_surgery_planning(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    if choice == BACK_BUTTON:
        return await medical_menu(update, context)
    elif choice == "–§–¢–ú –û–ø–µ—Ä–∞—Ü–∏–∏":
        await update.message.reply_text(
            FTM_SURGERY_INFO,
            reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
        )
        return MEDICAL_SURGERY_PLANNING
    elif choice == "–ú–¢–§ –û–ø–µ—Ä–∞—Ü–∏–∏":
        await update.message.reply_text(
            MTF_SURGERY_INFO,
            reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
        )
        return MEDICAL_SURGERY_PLANNING
    elif choice == "üóìÔ∏è –°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é":
        await update.message.reply_text(
            SURGERY_PLANNING_PROMPT,
            reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
        )
        context.user_data["request_type"] = "–ü–æ–º–æ—â—å - –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
        return TYPING
    elif choice == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        return await medical_menu(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")
        return MEDICAL_SURGERY_PLANNING

async def volunteer_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", reply_markup=ReplyKeyboardMarkup([["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True))
    return VOLUNTEER_NAME

async def volunteer_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info(f"User {update.effective_user.id} entered volunteer_name: {update.message.text}")
    context.user_data["volunteer_data"] = {"name": update.message.text}
    await update.message.reply_text("–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã —Ä–µ–≥–∏–æ–Ω–∞?", reply_markup=ReplyKeyboardMarkup([["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True))
    return VOLUNTEER_REGION

async def volunteer_region_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info(f"User {update.effective_user.id} entered volunteer_region: {update.message.text}, current user_data: {context.user_data}")
    context.user_data["volunteer_data"]["region"] = update.message.text
    await update.message.reply_text(
        "–ß–µ–º –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å?",
        reply_markup=VOLUNTEER_HELP_TYPE_KEYBOARD,
    )
    return VOLUNTEER_HELP_TYPE

async def volunteer_help_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data["volunteer_data"]["help_type"] = update.message.text
    user_contact = update.effective_user.username
    context.user_data["volunteer_data"]["contact"] = f"@{user_contact}" if user_contact else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    await update.message.reply_text("–ö–∞–∫ —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è (Telegram, email)?", reply_markup=ReplyKeyboardMarkup([["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True))
    return VOLUNTEER_CONTACT

async def volunteer_contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    logger.info(f"CHANNELS['t64_admin']: {CHANNELS.get('t64_admin')}")
    context.user_data["volunteer_data"]["contact_other"] = update.message.text
    user_id = update.effective_user.id
    volunteer_info = f"""–ù–æ–≤—ã–π –≤–æ–ª–æ–Ω—Ç–µ—Ä!
ID: {user_id}
–ò–º—è: {context.user_data["volunteer_data"].get("name", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")}
–†–µ–≥–∏–æ–Ω: {context.user_data["volunteer_data"].get("region", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")}
–¢–∏–ø –ø–æ–º–æ—â–∏: {context.user_data["volunteer_data"].get("help_type", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")}
–ö–æ–Ω—Ç–∞–∫—Ç (Telegram): {context.user_data["volunteer_data"].get("contact", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")}
–ö–æ–Ω—Ç–∞–∫—Ç (–î—Ä—É–≥–æ–µ): {context.user_data["volunteer_data"].get("contact_other", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")}"""

    try:
        await context.bot.send_message(chat_id=CHANNELS.get("t64_admin"), text=volunteer_info)
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ t64_admin: {volunteer_info}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ t64_admin: {e}")

    help_type = context.user_data["volunteer_data"].get("help_type", "").lower()
    if "—é—Ä–∏–¥–∏—á–µ—Å–∫" in help_type:
        try:
            await context.bot.send_message(chat_id=CHANNELS.get("t64_legal"), text=volunteer_info)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ t64_legal: {e}")
    elif "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫" in help_type:
        try:
            await context.bot.send_message(chat_id=CHANNELS.get("t64_psych"), text=volunteer_info)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ t64_psych: {e}")
    elif "–º–µ–¥–∏—Ü–∏–Ω—Å–∫" in help_type or "—Ñ–∏–Ω–∞–Ω—Å–æ–≤" in help_type or "–¥—Ä—É–≥" in help_type:
        try:
            await context.bot.send_message(chat_id=CHANNELS.get("t64_gen"), text=volunteer_info)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ t64_gen: {e}")
    elif "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω" in help_type or "—Ç–µ–∫—Å—Ç" in help_type or "–º–æ–¥–µ—Ä–∞—Ü" in help_type:
        try:
            await context.bot.send_message(chat_id=CHANNELS.get("t64_misc"), text=volunteer_info)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ t64_misc: {e}")

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.",
        reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
    )
    context.user_data.clear()
    return MAIN_MENU

async def anonymous_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    message = update.message.text
    message_id = generate_message_id(update.effective_user.id)

    try:
        await context.bot.send_message(
            chat_id=CHANNELS.get("t64_misc"),
            text=f"üîí –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ [{message_id}]:\n\n{message}"
        )
        await update.message.reply_text(
            ANONYMOUS_CONFIRMATION,
            reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
        )
        # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if "request_type" in context.user_data:
            del context.user_data["request_type"]
        return MAIN_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON], ["‚úÖ –ì–æ—Ç–æ–≤–æ"]], resize_keyboard=True),
        )
        return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove()
    )
    context.user_data.clear()
    return ConversationHandler.END

def main() -> None:
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)],
            HELP_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, help_menu)],
            TYPING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_typing)],
            FAQ_LEGAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, faq_legal)],
            MEDICAL_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, medical_menu)],
            MEDICAL_GENDER_THERAPY_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, medical_gender_therapy_menu)
            ],
            MEDICAL_FTM_HRT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, medical_ftm_hrt)
            ],
            MEDICAL_MTF_HRT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, medical_mtf_hrt)
            ],
            MEDICAL_SURGERY_PLANNING: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, medical_surgery_planning)
            ],
            VOLUNTEER_START_STATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, volunteer_start)],
            VOLUNTEER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, volunteer_name)],
            VOLUNTEER_REGION: [MessageHandler(filters.TEXT & ~filters.COMMAND, volunteer_region_handler)],
            VOLUNTEER_HELP_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, volunteer_help_type_handler)],
            VOLUNTEER_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, volunteer_contact_handler)],
            ANONYMOUS_MESSAGE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, anonymous_message)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.run_polling()

if __name__ == "__main__":
    main()

