import asyncio
import hashlib
import logging
from typing import Dict, Any

from telegram import (
    Update,
    ReplyKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.ext import (
    Application,
    CommandHandler,
    ConversationHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
from telegram.error import TelegramError

from config import Config
from states import States
from errors import (
    BotError,
    TelegramAPIError,
    ValidationError,
    StateError,
    global_error_handler,
)
from bot_responses import (
    START_MESSAGE,
    HELP_MENU_MESSAGE,
    RESOURCE_PROMPT_MESSAGE,
    VOLUNTEER_MESSAGE,
    DONATE_MESSAGE,
    EMERGENCY_MESSAGE,
    HOUSING_FINANCE_PROMPT,
    PSYCHOLOGICAL_HELP_PROMPT,
    CONSULTATION_PROMPT,
    MESSAGE_SENT_SUCCESS,
    MESSAGE_SEND_ERROR,
    CANCEL_MESSAGE,
    BACK_TO_MAIN_MENU,
    CHOOSE_FROM_MENU,
    CHOOSE_HELP_CATEGORY,
    GENDER_THERAPY_MESSAGE,
    FEMINIZING_HRT_INFO,
    MASCULINIZING_HRT_INFO,
    DIY_HRT_WARNING,
    LGBT_FAMILIES_INFO,
    REPORT_ABUSE_MESSAGE,
    FTM_SURGERY_INFO,
    MTF_SURGERY_INFO,
    GENDER_THERAPY_CHOICE_MESSAGE,
    SURGERY_INFO_MESSAGE,
    DOCUMENTS_MESSAGE,
    PROPAGANDA_MESSAGE,
    F64_MESSAGE,
    DIY_HRT_GUIDE_LINK,
    DIY_HRT_GUIDE_NAME,
    SURGERY_PLANNING_PROMPT,
    FAREWELL_MESSAGE,
    ANONYMOUS_CONFIRMATION,
)
from keyboards import (
    MAIN_MENU_BUTTONS,
    HELP_MENU_BUTTONS,
    LEGAL_MENU_BUTTONS,
    MEDICAL_MENU_BUTTONS,
    GENDER_THERAPY_CHOICE_BUTTONS,
    BACK_BUTTON,
    SURGERY_INFO_KEYBOARD,
    VOLUNTEER_HELP_TYPE_KEYBOARD,
)
from channels import CHANNELS
from models.user_data import UserDataManager
from utils.async_utils import gather_with_concurrency, send_message_safe

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

def generate_message_id(user_id: int) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ö–µ—à –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    return hashlib.sha256(f"{Config.HASH_SALT}_{user_id}_{os.urandom(16)}".encode()).hexdigest()[:8]

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        await update.message.reply_text(
            START_MESSAGE,
            reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True),
            parse_mode="Markdown",
        )
        return States.MAIN_MENU
    except Exception as e:
        raise TelegramAPIError(e, {"user_id": update.effective_user.id})

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user_data = UserDataManager(context)
    user_choice = update.message.text
    
    try:
        if user_choice == "üÜò –ü–æ–ø—Ä–æ—Å–∏—Ç—å –æ –ø–æ–º–æ—â–∏":
            await update.message.reply_text(
                HELP_MENU_MESSAGE,
                reply_markup=ReplyKeyboardMarkup(HELP_MENU_BUTTONS + [[BACK_BUTTON]], 
                resize_keyboard=True,
                parse_mode="Markdown",
            )
            return States.HELP_MENU
            
        elif user_choice == "‚ûï –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—Å—É—Ä—Å":
            user_data.request_type = "–†–µ—Å—É—Ä—Å"
            await update.message.reply_text(
                RESOURCE_PROMPT_MESSAGE, 
                reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True)
            )
            return States.TYPING
            
        elif user_choice == "ü§ù –°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º":
            await update.message.reply_text(
                VOLUNTEER_MESSAGE,
                reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True)
            )
            return States.VOLUNTEER_START
            
        elif user_choice == "üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç":
            user_data.request_type = "–î–æ–Ω–∞—Ç"
            await update.message.reply_text(
                DONATE_MESSAGE,
                parse_mode="Markdown",
                disable_web_page_preview=True,
                reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True)
            )
            return States.MAIN_MENU
            
        elif user_choice == "‚úâÔ∏è –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ":
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
                reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True),
            )
            user_data.request_type = "–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            return States.ANONYMOUS_MSG
            
        elif user_choice == BACK_BUTTON:
            await update.message.reply_text(
                FAREWELL_MESSAGE,
                reply_markup=ReplyKeyboardRemove()
            )
            return ConversationHandler.END
            
        else:
            await update.message.reply_text(CHOOSE_FROM_MENU)
            return States.MAIN_MENU
            
    except Exception as e:
        raise TelegramAPIError(e, {
            "user_id": update.effective_user.id,
            "user_choice": user_choice
        })

async def help_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é –ø–æ–º–æ—â–∏"""
    user_data = UserDataManager(context)
    user_choice = update.message.text
    
    try:
        if user_choice == BACK_BUTTON:
            await update.message.reply_text(
                BACK_TO_MAIN_MENU,
                reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True),
            )
            return States.MAIN_MENU
            
        elif user_choice == "üö® –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å":
            user_data.request_type = "–°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å"
            await update.message.reply_text(
                EMERGENCY_MESSAGE,
                reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True)
            )
            return States.TYPING
            
        elif user_choice == "üè† –ñ–∏–ª—å–µ/—Ñ–∏–Ω–∞–Ω—Å—ã":
            user_data.request_type = "–ñ–∏–ª—å–µ/—Ñ–∏–Ω–∞–Ω—Å—ã"
            await update.message.reply_text(
                HOUSING_FINANCE_PROMPT,
                reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True)
            )
            return States.TYPING
            
        elif user_choice == "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å":
            user_data.request_type = "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å"
            await update.message.reply_text(
                PSYCHOLOGICAL_HELP_PROMPT,
                reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True)
            )
            return States.TYPING
            
        elif user_choice == "ü©∫ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å":
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –ø–æ–º–æ—â–∏:",
                reply_markup=ReplyKeyboardMarkup(MEDICAL_MENU_BUTTONS + [[BACK_BUTTON]], 
                resize_keyboard=True),
            )
            return States.MEDICAL_MENU
            
        elif user_choice == "‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å":
            await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏:",
                reply_markup=ReplyKeyboardMarkup(LEGAL_MENU_BUTTONS + [[BACK_BUTTON]], 
                resize_keyboard=True),
            )
            return States.LEGAL_MENU
            
        else:
            await update.message.reply_text(CHOOSE_HELP_CATEGORY)
            return States.HELP_MENU
            
    except Exception as e:
        raise TelegramAPIError(e, {
            "user_id": update.effective_user.id,
            "user_choice": user_choice
        })

async def handle_typing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞"""
    user_data = UserDataManager(context)
    user_text = update.message.text
    request_type = user_data.request_type or "–°–æ–æ–±—â–µ–Ω–∏–µ"

    try:
        if user_text and user_text != BACK_BUTTON:
            channel_mapping = {
                "–†–µ—Å—É—Ä—Å": "t64_misc",
                "–°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å": "t64_gen",
                "–ü–æ–º–æ—â—å - –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ (—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ)": "t64_legal",
                # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–∞–ø–ø–∏–Ω–≥–∏
            }

            channel_name = channel_mapping.get(request_type)
            if channel_name:
                success = await send_message_safe(
                    context.bot,
                    CHANNELS.get(channel_name),
                    f"–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n{user_text}"
                )
                
                if success:
                    await update.message.reply_text(
                        MESSAGE_SENT_SUCCESS,
                        reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True),
                    )
                    return States.MAIN_MENU
                else:
                    raise TelegramAPIError("Failed to send message")
                    
            else:
                raise ValidationError(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞: {request_type}")
                
        elif user_text == BACK_BUTTON:
            if request_type in ["–†–µ—Å—É—Ä—Å", "–°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å", "–ñ–∏–ª—å–µ/—Ñ–∏–Ω–∞–Ω—Å—ã", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å"]:
                return await help_menu(update, context)
            else:
                return await main_menu(update, context)
                
        return States.TYPING
        
    except Exception as e:
        if not isinstance(e, (BotError, TelegramAPIError)):
            e = TelegramAPIError(e)
        raise e

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
    user_data = UserDataManager(context)
    await update.message.reply_text(
        CANCEL_MESSAGE,
        reply_markup=ReplyKeyboardRemove()
    )
    user_data.clear()
    return ConversationHandler.END

def setup_handlers(application: Application) -> None:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            States.MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)],
            States.HELP_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, help_menu)],
            States.TYPING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_typing)],
            # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(conv_handler)
    application.add_error_handler(global_error_handler)

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        Config.validate()
        
        application = Application.builder() \
            .token(Config.TOKEN) \
            .build()
            
        setup_handlers(application)
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        application.run_polling()
        
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}", exc_info=True)
        raise

if __name__ == "__main__":
    main()
