from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ConversationHandler,
    MessageHandler,
    filters,
)
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import ContextTypes
import logging
from bot_responses import (
    START_MESSAGE,
    HELP_MENU_MESSAGE,
    RESOURCE_PROMPT_MESSAGE,
    VOLUNTEER_MESSAGE,
    DONATE_MESSAGE,
    EMERGENCY_MESSAGE,
    HOUSING_FINANCE_PROMPT,
    PSYCHOLOGICAL_HELP_PROMPT,
    CONSULTATION_PROMPT,
    MESSAGE_SENT_SUCCESS,
    MESSAGE_SEND_ERROR,
    CANCEL_MESSAGE,
    BACK_TO_MAIN_MENU,
    CHOOSE_FROM_MENU,
    CHOOSE_HELP_CATEGORY,
    GENDER_THERAPY_MESSAGE,
    FEMINIZING_HRT_INFO,
    MASCULINIZING_HRT_INFO,
    DIY_HRT_WARNING,
    LGBT_FAMILIES_INFO,
    REPORT_ABUSE_MESSAGE,
    FTM_SURGERY_INFO,
    MTF_SURGERY_INFO,
    GENDER_THERAPY_CHOICE_MESSAGE,
    SURGERY_INFO_MESSAGE,
    DOCUMENTS_MESSAGE,
    PROPAGANDA_MESSAGE,
    F64_MESSAGE,
    DIY_HRT_GUIDE_LINK,
    DIY_HRT_GUIDE_NAME,
    SURGERY_PLANNING_PROMPT,
)
from keyboards import (
    MAIN_MENU_BUTTONS,
    HELP_MENU_BUTTONS,
    LEGAL_MENU_BUTTONS,
    MEDICAL_MENU_BUTTONS,
    GENDER_THERAPY_CHOICE_BUTTONS,
    BACK_BUTTON,
    SURGERY_INFO_KEYBOARD,
)
from channels import CHANNELS

# –í–∫–ª—é—á–∏—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
(
    START,
    MAIN_MENU,
    HELP_MENU,
    TYPING,
    FAQ_LEGAL,
    FAQ_MED,
    VOLUNTEER_START,
    VOLUNTEER_NAME,
    VOLUNTEER_REGION,
    VOLUNTEER_HELP_TYPE,
    VOLUNTEER_CONTACT,
    ANONYMOUS_MESSAGE,
    LEGAL_DOCUMENTS_CONSULT,
    LEGAL_PROPAGANDA_CONSULT,
    LEGAL_CONSULT,
    LEGAL_REPORT_ABUSE,
    MEDICAL_MENU,
    MEDICAL_GENDER_THERAPY_MENU,
    MEDICAL_FTM_HRT,
    MEDICAL_MTF_HRT,
    MEDICAL_SURGERY_MENU,
    MEDICAL_SURGERY_FTM_CONSULT,
    MEDICAL_SURGERY_MTF_CONSULT,
    MEDICAL_SURGEON_PLANNING,
    MEDICAL_SURGERY_PLANNING,
) = range(25)

YOUR_BOT_TOKEN = "YOUR_BOT_TOKEN"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
YOUR_ADMIN_CHAT_ID = -123456789  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é."""
    await update.message.reply_text(START_MESSAGE, reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True), parse_mode="Markdown")
    return MAIN_MENU

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é."""
    user_choice = update.message.text
    if user_choice == "üÜò –ü–æ–ø—Ä–æ—Å–∏—Ç—å –æ –ø–æ–º–æ—â–∏":
        await update.message.reply_text(HELP_MENU_MESSAGE, reply_markup=ReplyKeyboardMarkup(HELP_MENU_BUTTONS, resize_keyboard=True), parse_mode="Markdown")
        return HELP_MENU
    elif user_choice == "‚ûï –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—Å—É—Ä—Å":
        await update.message.reply_text(RESOURCE_PROMPT_MESSAGE)
        context.user_data["type"] = "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞"
        return TYPING
    elif user_choice == "ü§ù –°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä–æ–º":
        await update.message.reply_text(VOLUNTEER_MESSAGE)
        return await volunteer_start(update, context)
    elif user_choice == "üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç":
        await update.message.reply_text(DONATE_MESSAGE, parse_mode="Markdown", disable_web_page_preview=True)
        context.user_data["type"] = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞"
        return TYPING
    elif user_choice == "‚úâÔ∏è –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        context.user_data["type"] = "–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        return ANONYMOUS_MESSAGE
    else:
        await update.message.reply_text(CHOOSE_FROM_MENU)
        return MAIN_MENU

async def help_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–Ω—é –ø–æ–º–æ—â–∏."""
    user_choice = update.message.text
    if user_choice == "üö® –°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å":
        await update.message.reply_text(EMERGENCY_MESSAGE, parse_mode="Markdown")
        context.user_data["type"] = "–°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å"
        return TYPING
    elif user_choice == "‚öñÔ∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å:", reply_markup=ReplyKeyboardMarkup(LEGAL_MENU_BUTTONS, resize_keyboard=True), parse_mode="Markdown")
        return FAQ_LEGAL
    elif user_choice == "ü©∫ –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å:", reply_markup=ReplyKeyboardMarkup(MEDICAL_MENU_BUTTONS, resize_keyboard=True), parse_mode="Markdown")
        return MEDICAL_MENU
    elif user_choice == "üè† –ñ–∏–ª—å–µ/—Ñ–∏–Ω–∞–Ω—Å—ã":
        await update.message.reply_text(HOUSING_FINANCE_PROMPT)
        context.user_data["type"] = "–ñ–∏–ª—å–µ/—Ñ–∏–Ω–∞–Ω—Å—ã"
        return TYPING
    elif user_choice == "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å":
        await update.message.reply_text(PSYCHOLOGICAL_HELP_PROMPT)
        context.user_data["type"] = "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å"
        return TYPING
    elif user_choice == BACK_BUTTON:
        await update.message.reply_text(BACK_TO_MAIN_MENU, reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))
        return MAIN_MENU
    else:
        await update.message.reply_text(CHOOSE_HELP_CATEGORY)
        return HELP_MENU

async def faq_legal(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –≤ —Ä–∞–∑–¥–µ–ª–µ —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏."""
    try:
        choice = update.message.text
        if choice == "üè≥Ô∏è‚Äçüåà –õ–ì–ë–¢+ —Å–µ–º—å–∏":
            await update.message.reply_text(LGBT_FAMILIES_INFO, parse_mode="Markdown", reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True))
            return HELP_MENU
        elif choice == "üìù –ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã":
            response = DOCUMENTS_MESSAGE
            keyboard = ReplyKeyboardMarkup([["–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ —Å–º–µ–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"], [BACK_BUTTON]], resize_keyboard=True)
            await update.message.reply_text(response, parse_mode="Markdown", reply_markup=keyboard)
            context.user_data["consultation_type"] = "—Å–º–µ–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
            return TYPING
        elif choice == "üì¢ –ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –õ–ì–ë–¢?":
            response = PROPAGANDA_MESSAGE
            keyboard = ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True)
            await update.message.reply_text(response, parse_mode="Markdown", reply_markup=keyboard)
            return HELP_MENU
        elif choice == "üó£Ô∏è –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
            await update.message.reply_text(CONSULTATION_PROMPT, parse_mode="Markdown", reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True))
            context.user_data["type"] = "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
            return TYPING
        elif choice == "üö® –°–æ–æ–±—â–∏—Ç—å –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏":
            await update.message.reply_text(REPORT_ABUSE_MESSAGE, parse_mode="Markdown", reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True))
            context.user_data["type"] = "–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ (—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ)"
            return TYPING
        elif choice == BACK_BUTTON:
            return await help_menu(update, context)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")
            return FAQ_LEGAL
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ faq_legal: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")
        return FAQ_LEGAL

async def medical_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–º –º–µ–Ω—é."""
    try:
        choice = update.message.text
        if choice == "üó£Ô∏è –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
            await update.message.reply_text(CONSULTATION_PROMPT)
            context.user_data["type"] = "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
            return TYPING
        elif choice == "üíâHRT":
            await update.message.reply_text(GENDER_THERAPY_MESSAGE, parse_mode="Markdown", reply_markup=ReplyKeyboardMarkup(GENDER_THERAPY_CHOICE_BUTTONS, resize_keyboard=True))
            return MEDICAL_GENDER_THERAPY_MENU
        elif choice == "‚ùì F64":
            await update.message.reply_text(F64_MESSAGE, parse_mode="Markdown", reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True))
            return MEDICAL_MENU
        elif choice == "‚öïÔ∏è –û–ø–µ—Ä–∞—Ü–∏–∏":
            await update.message.reply_text(SURGERY_INFO_MESSAGE, parse_mode="Markdown", reply_markup=SURGERY_INFO_KEYBOARD)
            return MEDICAL_SURGERY_PLANNING  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        elif choice == "üóìÔ∏è –°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é":
            await update.message.reply_text(SURGERY_PLANNING_PROMPT)
            context.user_data["type"] = "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
            return TYPING
        elif choice == BACK_BUTTON:
            return await help_menu(update, context)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")
            return MEDICAL_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ medical_menu: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")
        return MEDICAL_MENU

async def medical_gender_therapy_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–º–æ–Ω–∞–ª—å–Ω–æ–π —Ç–µ—Ä–∞–ø–∏–∏."""
    try:
        choice = update.message.text
        if choice == "T":
            await update.message.reply_text(MASCULINIZING_HRT_INFO, parse_mode="Markdown", reply_markup=ReplyKeyboardMarkup([["DIY"], ["–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –º—É–∂—Å–∫–æ–π –ì–¢"], [BACK_BUTTON]], resize_keyboard=True))
            return MEDICAL_FTM_HRT
        elif choice == "E":
            await update.message.reply_text(FEMINIZING_HRT_INFO, parse_mode="Markdown", reply_markup=ReplyKeyboardMarkup([["DIY"], ["–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –∂–µ–Ω—Å–∫–æ–π –ì–¢"], [BACK_BUTTON]], resize_keyboard=True))
            return MEDICAL_MTF_HRT
        elif choice == BACK_BUTTON:
            return await medical_menu(update, context)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")
            return MEDICAL_GENDER_THERAPY_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ medical_gender_therapy_menu: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")
        return MEDICAL_GENDER_THERAPY_MENU

async def medical_ftm_hrt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–∞—Å–∫—É–ª–∏–Ω–∏–∑–∏—Ä—É—é—â–µ–π –ì–¢."""
    try:
        choice = update.message.text
        if choice == "DIY":
            keyboard = ReplyKeyboardMarkup([["–Ø –ø–æ–Ω–∏–º–∞—é —Ä–∏—Å–∫–∏, —Å–∫–∞—á–∞—Ç—å –≥–∞–π–¥"], [BACK_BUTTON]], resize_keyboard=True)
            await update.message.reply_text(DIY_HRT_WARNING, parse_mode="Markdown", reply_markup=keyboard)
            return  # –û—Å—Ç–∞–µ–º—Å—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–æ –≤—ã–±–æ—Ä–∞
        elif choice == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –º—É–∂—Å–∫–æ–π –ì–¢" or choice == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
            await update.message.reply_text(CONSULTATION_PROMPT, parse_mode="Markdown", reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True))
            context.user_data["type"] = "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –º—É–∂—Å–∫–æ–π –ì–¢"
            return TYPING
        elif choice == "–Ø –ø–æ–Ω–∏–º–∞—é —Ä–∏—Å–∫–∏, —Å–∫–∞—á–∞—Ç—å –≥–∞–π–¥":
            link = DIY_HRT_GUIDE_LINK
            file_name = DIY_HRT_GUIDE_NAME
            await update.message.reply_text(
                f"–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≥–∞–π–¥ –ø–æ DIY –ì–¢: [{file_name}]({link})",
                parse_mode="Markdown",
                reply_markup=ReplyKeyboardMarkup([["–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –º—É–∂—Å–∫–æ–π –ì–¢"], [BACK_BUTTON]], resize_keyboard=True),
                disable_web_page_preview=True
            )
            return  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        elif choice == BACK_BUTTON:
            return await medical_gender_therapy_menu(update, context)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")
            return MEDICAL_FTM_HRT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ medical_ftm_hrt: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")
        return MEDICAL_FTM_HRT

async def medical_mtf_hrt(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ñ–µ–º–∏–Ω–∏–∑–∏—Ä—É—é—â–µ–π –ì–¢."""
    try:
        choice = update.message.text
        if choice == "DIY":
            keyboard = ReplyKeyboardMarkup([["–Ø –ø–æ–Ω–∏–º–∞—é —Ä–∏—Å–∫–∏, —Å–∫–∞—á–∞—Ç—å –≥–∞–π–¥"], [BACK_BUTTON]], resize_keyboard=True)
            await update.message.reply_text(DIY_HRT_WARNING, parse_mode="Markdown", reply_markup=keyboard)
            return  # –û—Å—Ç–∞–µ–º—Å—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–æ –≤—ã–±–æ—Ä–∞
        elif choice == "–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –∂–µ–Ω—Å–∫–æ–π –ì–¢" or choice == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è":
            await update.message.reply_text(CONSULTATION_PROMPT, parse_mode="Markdown", reply_markup=ReplyKeyboardMarkup([[BACK_BUTTON]], resize_keyboard=True))
            context.user_data["type"] = "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∂–µ–Ω—Å–∫–æ–π –ì–¢"
            return TYPING
        elif choice == "–Ø –ø–æ–Ω–∏–º–∞—é —Ä–∏—Å–∫–∏, —Å–∫–∞—á–∞—Ç—å –≥–∞–π–¥":
            link = DIY_HRT_GUIDE_LINK
            file_name = DIY_HRT_GUIDE_NAME
            await update.message.reply_text(
                f"–í—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≥–∞–π–¥ –ø–æ DIY –ì–¢: [{file_name}]({link})",
                parse_mode="Markdown",
                reply_markup=ReplyKeyboardMarkup([["–ó–∞–ø—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –∂–µ–Ω—Å–∫–æ–π –ì–¢"], [BACK_BUTTON]], resize_keyboard=True),
                disable_web_page_preview=True
            )
            return  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ —ç—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        elif choice == BACK_BUTTON:
            return await medical_gender_therapy_menu(update, context)
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")
            return MEDICAL_MTF_HRT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ medical_mtf_hrt: {e}", exc_info=True)
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", parse_mode="HTML")
        return MEDICAL_MTF_HRT

async def medical_surgery_planning(update: Update, context:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    choice = update.message.text
    if choice == "üóìÔ∏è –°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é":
        await update.message.reply_text(SURGERY_PLANNING_PROMPT)
        context.user_data["type"] = "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏"
        return TYPING
    elif choice == BACK_BUTTON:
        return await medical_menu(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é.")
        return MEDICAL_SURGERY_PLANNING

async def volunteer_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–æ–ª–æ–Ω—Ç–µ—Ä–µ."""
    await update.message.reply_text("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    return VOLUNTEER_NAME

async def volunteer_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–º—è –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞."""
    context.user_data["volunteer_name"] = update.message.text
    await update.message.reply_text("–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã —Ä–µ–≥–∏–æ–Ω–∞?")
    return VOLUNTEER_REGION

async def volunteer_region(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–≥–∏–æ–Ω –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞."""
    context.user_data["volunteer_region"] = update.message.text
    await update.message.reply_text("–ö–∞–∫–∞—è –ø–æ–º–æ—â—å –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —é—Ä–∏–¥–∏—á–µ—Å–∫–∞—è, –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è)?")
    return VOLUNTEER_HELP_TYPE

async def volunteer_help_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–∏–ø –ø–æ–º–æ—â–∏, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–µ—Ç –æ–∫–∞–∑–∞—Ç—å –≤–æ–ª–æ–Ω—Ç–µ—Ä."""
    context.user_data["volunteer_help_type"] = update.message.text.lower()
    await update.message.reply_text("–ö–∞–∫ —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è (Telegram, email)?")
    return VOLUNTEER_CONTACT

async def volunteer_contact(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞ –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Å–±–æ—Ä."""
    context.user_data["volunteer_contact"] = update.message.text
    volunteer_info = f"""–ù–æ–≤—ã–π –≤–æ–ª–æ–Ω—Ç–µ—Ä!
–ò–º—è: {context.user_data.get('volunteer_name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
–†–µ–≥–∏–æ–Ω: {context.user_data.get('volunteer_region', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
–¢–∏–ø –ø–æ–º–æ—â–∏: {context.user_data.get('volunteer_help_type', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
–ö–æ–Ω—Ç–∞–∫—Ç: {context.user_data.get('volunteer_contact', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"""

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –í–°–ï–• –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞—Ö –≤ t64_admin
    await context.bot.send_message(chat_id=CHANNELS.get("t64_admin"), text=volunteer_info)

    help_type = context.user_data.get("volunteer_help_type", "").lower()
    if "—é—Ä–∏–¥–∏—á–µ—Å–∫" in help_type:
        await context.bot.send_message(chat_id=CHANNELS.get("t64_legal"), text=volunteer_info)
    elif "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫" in help_type:
        await context.bot.send_message(chat_id=CHANNELS.get("t64_psych"), text=volunteer_info)
    elif "–º–µ–¥–∏—Ü–∏–Ω—Å–∫" in help_type or "—Ñ–∏–Ω–∞–Ω—Å–æ–≤" in help_type or "–¥—Ä—É–≥" in help_type:
        await context.bot.send_message(chat_id=CHANNELS.get("t64_gen"), text=volunteer_info)
    elif "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω" in help_type or "—Ç–µ–∫—Å—Ç" in help_type or "–º–æ–¥–µ—Ä–∞—Ü" in help_type:
        await context.bot.send_message(chat_id=CHANNELS.get("t64_misc"), text=volunteer_info)

    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))
    return MAIN_MENU

async def anonymous_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    message = update.message.text
    await context.bot.send_message(chat_id=CHANNELS.get("t64_misc"), text=f"–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
    await update.message.reply_text("–í–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.", reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))
    return MAIN_MENU

async def handle_typing(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤."""
    user_text = update.message.text
    message_type = context.user_data.get("type", "–°–æ–æ–±—â–µ–Ω–∏–µ")
    consultation_type = context.user_data.get("consultation_type")
    report_admin = f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n–¢–∏–ø: {message_type}"
    if consultation_type:
        report_admin += f"\n–¢–∏–ø –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {consultation_type}"
    report_admin += f"\n–¢–µ–∫—Å—Ç: {user_text}"

    if not message_type.startswith("–°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å"):
        await context.bot.send_message(chat_id=YOUR_ADMIN_CHAT_ID, text=report_admin)

    if message_type == "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞":
        await context.bot.send_message(chat_id=CHANNELS.get("t64_misc"), text=user_text)
    elif message_type == "–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ":
        await context.bot.send_message(chat_id=CHANNELS.get("t64_misc"), text=user_text)
    elif message_type.startswith("–°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å"):
        await context.bot.send_message(chat_id=CHANNELS.get("t64_admin"), text=user_text)
    elif message_type.startswith("–°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Ä—É—à–µ–Ω–∏–∏ (—é—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ)"):
        await context.bot.send_message(chat_id=CHANNELS.get("t64_legal"), text=user_text)
    elif message_type.startswith("–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"):
        await context.bot.send_message(chat_id=CHANNELS.get("t64_legal"), text=f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é: {user_text}")
    elif message_type.startswith("–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è") or \
         message_type.startswith("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –º—É–∂—Å–∫–æ–π –ì–¢") or \
         message_type.startswith("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∂–µ–Ω—Å–∫–æ–π –ì–¢") or \
         message_type == "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏" or \
         message_type == "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –§–¢–ú –æ–ø–µ—Ä–∞—Ü–∏–∏" or \
         message_type == "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ú–¢–§ –æ–ø–µ—Ä–∞—Ü–∏–∏":
        await context.bot.send_message(chat_id=CHANNELS.get("t64_gen"), text=f"–ó–∞–ø—Ä–æ—Å: {user_text}")
    elif message_type == "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å":
        await context.bot.send_message(chat_id=CHANNELS.get("t64_psych"), text=user_text)
    elif message_type == "–ñ–∏–ª—å–µ/—Ñ–∏–Ω–∞–Ω—Å—ã":
        await context.bot.send_message(chat_id=CHANNELS.get("t64_gen"), text=user_text)

    await update.message.reply_text(MESSAGE_SENT_SUCCESS, reply_markup=ReplyKeyboardMarkup(MAIN_MENU_BUTTONS, resize_keyboard=True))
    return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä."""
    await update.message.reply_text(CANCEL_MESSAGE, reply_markup=ReplyKeyboardRemove())
    return START

def main() -> None:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞."""
    application = Application.builder().token(YOUR_BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)],
            HELP_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, help_menu)],
            FAQ_LEGAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, faq_legal)],
            FAQ_MED: [MessageHandler(filters.TEXT & ~filters.COMMAND, medical_menu)],
            MEDICAL_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, medical_menu)],
            MEDICAL_GENDER_THERAPY_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, medical_gender_therapy_menu)],
            MEDICAL_FTM_HRT: [MessageHandler(filters.TEXT & ~filters.COMMAND, medical_ftm_hrt)],
            MEDICAL_MTF_HRT: [MessageHandler(filters.TEXT & ~filters.COMMAND, medical_mtf_hrt)],
            MEDICAL_SURGERY_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, medical_surgery_menu)], # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            MEDICAL_SURGERY_PLANNING: [MessageHandler(filters.TEXT & ~filters.COMMAND, medical_surgery_planning)], # –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            TYPING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_typing)],
            VOLUNTEER_START: [MessageHandler(filters.TEXT & ~filters.COMMAND, volunteer_name)],
            VOLUNTEER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, volunteer_region)],
            VOLUNTEER_REGION: [MessageHandler(filters.TEXT & ~filters.COMMAND, volunteer_help_type)],
            VOLUNTEER_HELP_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, volunteer_contact)],
            VOLUNTEER_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu)],
            ANONYMOUS_MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, anonymous_message)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
