import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
START, MENU, HELP_TYPE, TYPING, FAQ_LEGAL, FAQ_MED = range(6)

# –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
WARNING_URGENT = """
üö® *–°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å* 

–í–∞–∂–Ω–æ:
1. –ï—Å–ª–∏ –µ—Å—Ç—å —É–≥—Ä–æ–∑–∞ –∂–∏–∑–Ω–∏ - —Å—Ä–∞–∑—É –∑–≤–æ–Ω–∏—Ç–µ –≤ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã
2. –ú—ã –æ—Ç–≤–µ—á–∞–µ–º –≤ —Ç–µ—á–µ–Ω–∏–µ 1-3 —á–∞—Å–æ–≤
3. –î–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏ –Ω–µ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ:
‚Ä¢ –ß—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ
‚Ä¢ –ì–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å (–≥–æ—Ä–æ–¥/—Å—Ç—Ä–∞–Ω–∞)
‚Ä¢ –ö–∞–∫–∞—è –ø–æ–º–æ—â—å –Ω—É–∂–Ω–∞
"""

WARNING_HOUSING = """
üè† *–ñ–∏–ª—å—ë –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –ø–æ–º–æ—â—å*

–£—Å–ª–æ–≤–∏—è:
1. –ü–æ–º–æ—â—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Ä–µ–≥–∏–æ–Ω–∞—Ö
2. –ñ–∏–ª—å—ë –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ 1-3 –º–µ—Å—è—Ü–∞
3. –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –æ–ø–∞—Å–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ (—É–≥—Ä–æ–∑–∞ –∂–∏–∑–Ω–∏, –Ω–∞—Å–∏–ª–∏–µ)

–û–ø–∏—à–∏—Ç–µ:
‚Ä¢ –í–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é
‚Ä¢ –ì–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è
‚Ä¢ –°—Ä–æ–∫, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∂–∏–ª—å—ë
"""

# –û—Ç–≤–µ—Ç—ã –Ω–∞ FAQ
FAQ_RESPONSES = {
    # –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    "–ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã?": """–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞...""",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –õ–ì–ë–¢?": """–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞...""",
    
    # –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    "–ñ–µ–Ω—Å–∫–∞—è –ì–¢": """–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞...""",
    "–ú—É–∂—Å–∫–∞—è –ì–¢": """–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞...""",
    "–î–∏–∞–≥–Ω–æ–∑ F64": """–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞..."""
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_kb = ReplyKeyboardMarkup([
    ["–°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å", "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å"],
    ["–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å", "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"],
    ["–ñ–∏–ª—å—ë –∏ —Ñ–∏–Ω–∞–Ω—Å—ã", "–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"],
    ["–†–µ—Å—É—Ä—Å—ã"]
], resize_keyboard=True)

help_kb = ReplyKeyboardMarkup([
    ["–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è", "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è"],
    ["–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è", "–ñ–∏–ª—å—ë –∏ —Ñ–∏–Ω–∞–Ω—Å—ã"],
    ["–ù–∞–∑–∞–¥"]
], resize_keyboard=True)

legal_faq_kb = ReplyKeyboardMarkup([
    ["–ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã?", "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –õ–ì–ë–¢?"],
    ["–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —é—Ä–∏—Å—Ç–∞", "–ù–∞–∑–∞–¥"]
], resize_keyboard=True)

medical_faq_kb = ReplyKeyboardMarkup([
    ["–ñ–µ–Ω—Å–∫–∞—è –ì–¢", "–ú—É–∂—Å–∫–∞—è –ì–¢"],
    ["–î–∏–∞–≥–Ω–æ–∑ F64", "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞"],
    ["–ù–∞–∑–∞–¥"]
], resize_keyboard=True)

# ID –∫–∞–Ω–∞–ª–æ–≤
CHANNELS = {
    "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è": -100123456,
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è": -100789012,
    "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è": -100345678,
    "–ñ–∏–ª—å—ë –∏ —Ñ–∏–Ω–∞–Ω—Å—ã": -100901234,
    "–°—Ä–æ—á–Ω–∞—è": -100901234,
    "–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ": -100567890,
    "–†–µ—Å—É—Ä—Å—ã": -100567890
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=main_kb
    )
    return MENU

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    if choice == "–°—Ä–æ—á–Ω–∞—è –ø–æ–º–æ—â—å":
        context.user_data["type"] = "–°–†–û–ß–ù–û - –ó–∞–ø—Ä–æ—Å"
        await update.message.reply_text(
            WARNING_URGENT,
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove()
        )
        return TYPING
    elif choice == "–ñ–∏–ª—å—ë –∏ —Ñ–∏–Ω–∞–Ω—Å—ã":
        await update.message.reply_text(
            WARNING_HOUSING,
            parse_mode="Markdown",
            reply_markup=ReplyKeyboardRemove()
        )
        context.user_data["type"] = "–ñ–∏–ª—å—ë/—Ñ–∏–Ω–∞–Ω—Å—ã"
        return TYPING
    elif choice in ["–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å", "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –ø–æ–º–æ—â—å"]:
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=help_kb)
        return HELP_TYPE
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏...

async def help_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    category = update.message.text
    if category == "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=legal_faq_kb)
        return FAQ_LEGAL
    elif category == "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=medical_faq_kb)
        return FAQ_MED
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...

async def handle_legal_faq(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    question = update.message.text
    if question == "–ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=help_kb)
        return HELP_TYPE
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö FAQ...

async def handle_medical_faq(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    question = update.message.text
    if question == "–ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=help_kb)
        return HELP_TYPE
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö FAQ...

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    msg = update.message.text
    request_type = context.user_data.get("type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    channel_key = request_type.split()[0]
    if "–°–†–û–ß–ù–û" in request_type:
        channel_key = "–°—Ä–æ—á–Ω–∞—è"
    chat_id = CHANNELS.get(channel_key, ADMIN_CHAT_ID)
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    text = f"üì© *{request_type}*\n"
    if "–ê–Ω–æ–Ω–∏–º–Ω–æ–µ" not in request_type:
        text += f"–û—Ç: @{update.message.from_user.username or '–Ω–µ—Ç'} (ID: {update.message.from_user.id})\n\n"
    text += msg
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode="Markdown"
    )
    await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=main_kb)
    return MENU

def main():
    app = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, menu)],
            HELP_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, help_category)],
            FAQ_LEGAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_legal_faq)],
            FAQ_MED: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_medical_faq)],
            TYPING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
