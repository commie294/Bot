import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
START, MENU, HELP_TYPE, TYPING, FAQ_LEGAL, FAQ_MED = range(6)

# –û—Ç–≤–µ—Ç—ã –Ω–∞ FAQ
FAQ_RESPONSES = {
    # –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    "–ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã?": """–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞...""",
    "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –õ–ì–ë–¢?": """–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞...""",
    
    # –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    "–ñ–µ–Ω—Å–∫–∞—è –ì–¢": """–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞...""",
    "–ú—É–∂—Å–∫–∞—è –ì–¢": """–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞...""",
    "–î–∏–∞–≥–Ω–æ–∑ F64": """–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞...""",
    "–ì–¥–µ –¥–µ–ª–∞—é—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏?": """–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞..."""
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_kb = ReplyKeyboardMarkup([
    ["–ó–∞–ø—Ä–æ—Å –æ –ø–æ–º–æ—â–∏"],
    ["–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—Å—É—Ä—Å", "–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å"],
    ["–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–º"],
    ["–ù–∞–∑–∞–¥"]
], resize_keyboard=True)

help_kb = ReplyKeyboardMarkup([
    ["–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è", "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è"],
    ["–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è", "–ñ–∏–ª—å—ë –∏ —Ñ–∏–Ω–∞–Ω—Å—ã"],
    ["–ù–∞–∑–∞–¥"]
], resize_keyboard=True)

legal_faq_kb = ReplyKeyboardMarkup([
    ["–ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã?", "–ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–ø–∞–≥–∞–Ω–¥–∞ –õ–ì–ë–¢?"],
    ["–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —é—Ä–∏—Å—Ç–∞", "–ù–∞–∑–∞–¥"]
], resize_keyboard=True)

medical_faq_kb = ReplyKeyboardMarkup([
    ["–ñ–µ–Ω—Å–∫–∞—è –ì–¢", "–ú—É–∂—Å–∫–∞—è –ì–¢"],
    ["–î–∏–∞–≥–Ω–æ–∑ F64", "–ì–¥–µ –¥–µ–ª–∞—é—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏?"],
    ["–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞", "–ù–∞–∑–∞–¥"]
], resize_keyboard=True)

# ID –∫–∞–Ω–∞–ª–æ–≤
CHANNELS = {
    "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è": -100123456,
    "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è": -100789012,
    "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è": -100345678,
    "–ñ–∏–ª—å—ë –∏ —Ñ–∏–Ω–∞–Ω—Å—ã": -100901234,
    "–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ": -100567890,
    "–†–µ—Å—É—Ä—Å—ã": -100567890
}

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=main_kb
    )
    return MENU

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ '–ü–µ—Ä–µ—Ö–æ–¥ –≤ –Ω–µ–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–º –º–µ—Å—Ç–µ'.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "- –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–º–æ—â—å\n"
        "- –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π —Ä–µ—Å—É—Ä—Å\n"
        "- –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ\n"
        "- –°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–º\n"
        "- –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        reply_markup=main_kb
    )
    return MENU

async def menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    choice = update.message.text
    if choice == "–ó–∞–ø—Ä–æ—Å –æ –ø–æ–º–æ—â–∏":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ–º–æ—â–∏:", reply_markup=help_kb)
        return HELP_TYPE
    elif choice == "–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—Å—É—Ä—Å":
        context.user_data["type"] = "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞"
        await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ —Ä–µ—Å—É—Ä—Å, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å:", reply_markup=ReplyKeyboardRemove())
        return TYPING
    elif choice == "–ü–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å":
        await update.message.reply_text(
            "–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç:\n\n"
            "‚Ä¢ Boosty: https://boosty.to/t64/donate\n"
            "‚Ä¢ USDT (TRC-20): TLTBoXCSifWGBeuiRkxkPtH9M9mfwSf1sf",
            reply_markup=main_kb
        )
        return MENU
    elif choice == "–°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–º":
        await update.message.reply_text(
            "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞:\n"
            "https://forms.gle/n2mZdRA2fYBeeCUY7",
            reply_markup=main_kb
        )
        return MENU
    elif choice == "–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ":
        context.user_data["type"] = "–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:", reply_markup=ReplyKeyboardRemove())
        return TYPING
    elif choice == "–ù–∞–∑–∞–¥":
        return await start(update, context)
    return MENU

async def help_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    category = update.message.text
    if category == "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=legal_faq_kb)
        return FAQ_LEGAL
    elif category == "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:", reply_markup=medical_faq_kb)
        return FAQ_MED
    elif category == "–ù–∞–∑–∞–¥":
        return await start(update, context)
    else:
        context.user_data["type"] = f"–ó–∞–ø—Ä–æ—Å - {category}"
        await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é:", reply_markup=ReplyKeyboardRemove())
        return TYPING

async def handle_legal_faq(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    question = update.message.text
    if question == "–ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=help_kb)
        return HELP_TYPE
    elif question == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —é—Ä–∏—Å—Ç–∞":
        context.user_data["type"] = "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è - –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
        await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å —é—Ä–∏—Å—Ç—É:", reply_markup=ReplyKeyboardRemove())
        return TYPING
    else:
        await update.message.reply_text(FAQ_RESPONSES.get(question, "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"), reply_markup=legal_faq_kb)
        return FAQ_LEGAL

async def handle_medical_faq(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    question = update.message.text
    if question == "–ù–∞–∑–∞–¥":
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=help_kb)
        return HELP_TYPE
    elif question == "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞":
        context.user_data["type"] = "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è - –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
        await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ –≤–∞—à –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å:", reply_markup=ReplyKeyboardRemove())
        return TYPING
    else:
        await update.message.reply_text(FAQ_RESPONSES.get(question, "–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"), reply_markup=medical_faq_kb)
        return FAQ_MED

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    msg = update.message.text
    request_type = context.user_data.get("type", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
    
    channel_key = request_type.split()[0]
    chat_id = CHANNELS.get(channel_key, ADMIN_CHAT_ID)
    
    text = f"üì© *{request_type}*\n"
    if "–ê–Ω–æ–Ω–∏–º–Ω–æ–µ" not in request_type:
        text += f"–û—Ç: @{update.message.from_user.username or '–Ω–µ—Ç'} (ID: {update.message.from_user.id})\n\n"
    text += msg
    
    await context.bot.send_message(
        chat_id=chat_id,
        text=text,
        parse_mode="Markdown"
    )
    await update.message.reply_text("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!", reply_markup=main_kb)
    return MENU

def main():
    app = Application.builder().token(TOKEN).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, menu)],
            HELP_TYPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, help_category)],
            FAQ_LEGAL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_legal_faq)],
            FAQ_MED: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_medical_faq)],
            TYPING: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)]
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )
    
    app.add_handler(conv_handler)
    app.run_polling()

if __name__ == "__main__":
    main()
