import asyncio
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import ContextTypes
from telegram.error import TelegramError
from bot_responses import CANCEL_MESSAGE
from keyboards import VOLUNTEER_START_KEYBOARD, VOLUNTEER_HELP_TYPE_KEYBOARD, FINISH_MENU_KEYBOARD, REGIONS
from utils.message_utils import load_channels, update_stats, check_rate_limit
from utils.constants import BotState

logger = logging.getLogger(__name__)

async def ask_volunteer_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await check_rate_limit(update, context):
        return BotState.VOLUNTEER_CONFIRM_START
    await update.message.reply_text(
        "üìã *–®–∞–≥ 1/4:* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è\\.",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True),
        parse_mode="MarkdownV2"
    )
    return BotState.VOLUNTEER_NAME

async def get_volunteer_region(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await check_rate_limit(update, context):
        return BotState.VOLUNTEER_NAME
    name = update.message.text
    if not name:
        keyboard = ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è\\.",
            reply_markup=keyboard,
            parse_mode="MarkdownV2"
        )
        return BotState.VOLUNTEER_NAME
    context.user_data["volunteer_data"] = {"name": name}
    keyboard = ReplyKeyboardMarkup(REGIONS + [["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    await update.message.reply_text(
        "üìç *–®–∞–≥ 2/4:* –ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã —Ä–µ–≥–∏–æ–Ω–∞\\?",
        reply_markup=keyboard,
        parse_mode="MarkdownV2"
    )
    return BotState.VOLUNTEER_REGION

async def volunteer_help_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await check_rate_limit(update, context):
        return BotState.VOLUNTEER_REGION
    region = update.message.text
    if region == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            CANCEL_MESSAGE,
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="MarkdownV2"
        )
        context.user_data.clear()
        return ConversationHandler.END
    if not region:
        keyboard = ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω\\.",
            reply_markup=keyboard,
            parse_mode="MarkdownV2"
        )
        return BotState.VOLUNTEER_REGION
    context.user_data["volunteer_data"]["region"] = region
    await update.message.reply_text(
        "ü§ù *–®–∞–≥ 3/4:* –ß–µ–º –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å\\?",
        reply_markup=VOLUNTEER_HELP_TYPE_KEYBOARD,
        parse_mode="MarkdownV2"
    )
    return BotState.VOLUNTEER_HELP_TYPE

async def volunteer_contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await check_rate_limit(update, context):
        return BotState.VOLUNTEER_HELP_TYPE
    help_type = update.message.text
    if help_type == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            CANCEL_MESSAGE,
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="MarkdownV2"
        )
        context.user_data.clear()
        return ConversationHandler.END
    context.user_data["volunteer_data"]["help_type"] = help_type
    user_contact = update.effective_user.username
    context.user_data["volunteer_data"]["contact"] = f"@{user_contact}" if user_contact else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    keyboard = ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    await update.message.reply_text(
        "üìû *–®–∞–≥ 4/4:* –ö–∞–∫ —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è \\(Telegram, email\\)\\?",
        reply_markup=keyboard,
        parse_mode="MarkdownV2"
    )
    return BotState.VOLUNTEER_CONTACT

async def volunteer_finish_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await check_rate_limit(update, context):
        return BotState.VOLUNTEER_CONTACT
    contact_other = update.message.text
    if contact_other == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            CANCEL_MESSAGE,
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="MarkdownV2"
        )
        context.user_data.clear()
        return ConversationHandler.END
    if not contact_other:
        keyboard = ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\\.",
            reply_markup=keyboard,
            parse_mode="MarkdownV2"
        )
        return BotState.VOLUNTEER_CONTACT
    context.user_data["volunteer_data"]["contact_other"] = contact_other
    user_id = update.effective_user.id
    volunteer_info = f"""*–ù–æ–≤—ã–π –≤–æ–ª–æ–Ω—Ç—ë—Ä!*
*ID:* {user_id}
*–ò–º—è:* {context.user_data["volunteer_data"].get("name", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")}
*–†–µ–≥–∏–æ–Ω:* {context.user_data["volunteer_data"].get("region", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")}
*–¢–∏–ø –ø–æ–º–æ—â–∏:* {context.user_data["volunteer_data"].get("help_type", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")}
*–ö–æ–Ω—Ç–∞–∫—Ç \\(Telegram\\):* {context.user_data["volunteer_data"].get("contact", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")}
*–ö–æ–Ω—Ç–∞–∫—Ç \\(–î—Ä—É–≥–æ–µ\\):* {contact_other}"""

    channels = load_channels()
    channel_map = {
        "—é—Ä–∏–¥–∏—á–µ—Å–∫": "t64_legal",
        "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫": "t64_psych",
        "–º–µ–¥–∏—Ü–∏–Ω—Å–∫": "t64_gen",
        "—Ñ–∏–Ω–∞–Ω—Å–æ–≤": "t64_gen",
        "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫": "t64_gen",
        "–¥—Ä—É–≥": "t64_gen",
        "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω": "t64_misc",
        "—Ç–µ–∫—Å—Ç": "t64_misc",
        "–º–æ–¥–µ—Ä–∞—Ü": "t64_misc",
    }

    tasks = [context.bot.send_message(chat_id=channels["t64_admin"], text=volunteer_info, parse_mode="MarkdownV2")]
    help_type = context.user_data["volunteer_data"].get("help_type", "").lower()
    for keyword, channel_name in channel_map.items():
        if keyword in help_type:
            tasks.append(context.bot.send_message(chat_id=channels[channel_name], text=volunteer_info, parse_mode="MarkdownV2"))

    try:
        await asyncio.gather(*tasks)
        logger.info(f"–î–∞–Ω–Ω—ã–µ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {volunteer_info}")
    except TelegramError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞: {e}", exc_info=True)

    await update.message.reply_text(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å\\! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞\\.",
        reply_markup=FINISH_MENU_KEYBOARD,
        parse_mode="MarkdownV2"
    )
    update_stats(user_id, "volunteer_registration")
    context.user_data.clear()
    return BotState.MAIN_MENU
