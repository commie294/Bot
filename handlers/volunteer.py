import asyncio
import logging
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, ConversationHandler
from telegram.error import TelegramError
from telegram.helpers import escape_markdown
from bot_responses import CANCEL_MESSAGE
from keyboards import VOLUNTEER_START_KEYBOARD, VOLUNTEER_HELP_TYPE_KEYBOARD, FINISH_MENU_KEYBOARD, REGIONS
from utils.message_utils import load_channels, update_stats, check_rate_limit
from utils.constants import BotState

logger = logging.getLogger(__name__)

async def ask_volunteer_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        if query.data == "volunteer_start":
            await query.message.edit_text(
                escape_markdown("üìã *–®–∞–≥ 1/4:* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.", version=2),
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_volunteer")]]),
                parse_mode="MarkdownV2"
            )
            return BotState.VOLUNTEER_NAME
        elif query.data == "back_to_main":
            await query.message.edit_text(
                escape_markdown("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", version=2),
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]),
                parse_mode="MarkdownV2"
            )
            context.user_data.clear()
            return BotState.MAIN_MENU
    elif update.message and update.message.text == "–û—Ç–º–µ–Ω–∞":
        await update.message.reply_text(
            CANCEL_MESSAGE,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]),
            parse_mode="MarkdownV2"
        )
        context.user_data.clear()
        return ConversationHandler.END
    return BotState.VOLUNTEER_CONFIRM_START

async def get_volunteer_region(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        region = query.data.replace("region_", "") # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏–æ–Ω –∏–∑ callback_data
        if region == "–¥—Ä—É–≥–æ–π":
            await query.message.edit_text(
                escape_markdown("üìç *–®–∞–≥ 2/4:* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–µ–≥–∏–æ–Ω.", version=2),
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_volunteer")]]),
                parse_mode="MarkdownV2"
            )
            context.user_data["awaiting_region_input"] = True
            return BotState.VOLUNTEER_REGION
        elif region == "–æ—Ç–º–µ–Ω–∞_—Ä–µ–≥–∏–æ–Ω":
            await query.message.edit_text(
                CANCEL_MESSAGE,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]),
                parse_mode="MarkdownV2"
            )
            context.user_data.clear()
            return ConversationHandler.END
        else:
            context.user_data["volunteer_data"]["region"] = escape_markdown(region, version=2)
            help_keyboard = [[InlineKeyboardButton(text, callback_data=f"help_type_{text}")] for row in VOLUNTEER_HELP_TYPE_KEYBOARD.inline_keyboard for text in row]
            help_keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_volunteer")])
            await query.message.edit_text(
                escape_markdown("ü§ù *–®–∞–≥ 3/4:* –ß–µ–º –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å?", version=2),
                reply_markup=InlineKeyboardMarkup(help_keyboard),
                parse_mode="MarkdownV2"
            )
            return BotState.VOLUNTEER_HELP_TYPE
    elif update.message and context.user_data.get("awaiting_region_input"):
        region_text = update.message.text
        if region_text == "–û—Ç–º–µ–Ω–∞":
            await update.message.reply_text(
                CANCEL_MESSAGE,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]),
                parse_mode="MarkdownV2"
            )
            context.user_data.clear()
            return ConversationHandler.END
        context.user_data["volunteer_data"]["region"] = escape_markdown(region_text, version=2)
        help_keyboard = [[InlineKeyboardButton(text, callback_data=f"help_type_{text}")] for row in VOLUNTEER_HELP_TYPE_KEYBOARD.inline_keyboard for text in row]
        help_keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_volunteer")])
        await update.message.reply_text(
            escape_markdown("ü§ù *–®–∞–≥ 3/4:* –ß–µ–º –≤—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å?", version=2),
            reply_markup=InlineKeyboardMarkup(help_keyboard),
            parse_mode="MarkdownV2"
        )
        del context.user_data["awaiting_region_input"]
        return BotState.VOLUNTEER_HELP_TYPE
    elif update.message and update.message.text:
        name = update.message.text
        context.user_data["volunteer_data"] = {"name": escape_markdown(name, version=2)}
        regions_keyboard = [[InlineKeyboardButton(text, callback_data=f"region_{text}")] for row in REGIONS for text in row]
        regions_keyboard.append([InlineKeyboardButton("–î—Ä—É–≥–æ–π —Ä–µ–≥–∏–æ–Ω", callback_data="region_–¥—Ä—É–≥–æ–π")])
        regions_keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_volunteer")])
        await update.message.reply_text(
            escape_markdown("üìç *–®–∞–≥ 2/4:* –ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã —Ä–µ–≥–∏–æ–Ω–∞?", version=2),
            reply_markup=InlineKeyboardMarkup(regions_keyboard),
            parse_mode="MarkdownV2"
        )
        return BotState.VOLUNTEER_REGION
    return BotState.VOLUNTEER_NAME

async def volunteer_help_type_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        if query.data == "cancel_volunteer":
            await query.message.edit_text(
                CANCEL_MESSAGE,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]),
                parse_mode="MarkdownV2"
            )
            context.user_data.clear()
            return ConversationHandler.END
        help_type = query.data.replace("help_type_", "")
        context.user_data["volunteer_data"]["help_type"] = escape_markdown(help_type, version=2)
        user_contact = update.effective_user.username
        context.user_data["volunteer_data"]["contact"] = f"@{user_contact}" if user_contact else "–Ω–µ —É–∫–∞–∑–∞–Ω"
        await query.message.edit_text(
            escape_markdown("üìû *–®–∞–≥ 4/4:* –ö–∞–∫ —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è (Telegram, email)?", version=2),
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_volunteer")]]),
            parse_mode="MarkdownV2"
        )
        return BotState.VOLUNTEER_CONTACT
    return BotState.VOLUNTEER_HELP_TYPE

async def volunteer_contact_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message:
        contact_other = update.message.text
        if contact_other == "–û—Ç–º–µ–Ω–∞":
            await update.message.reply_text(
                CANCEL_MESSAGE,
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]),
                parse_mode="MarkdownV2"
            )
            context.user_data.clear()
            return ConversationHandler.END
        if not contact_other:
            await update.message.reply_text(
                escape_markdown("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", version=2),
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_volunteer")]]),
                parse_mode="MarkdownV2"
            )
            return BotState.VOLUNTEER_CONTACT
        context.user_data["volunteer_data"]["contact_other"] = escape_markdown(contact_other, version=2)
        user_id = update.effective_user.id
        name = context.user_data["volunteer_data"].get("name", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        region = context.user_data["volunteer_data"].get("region", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        help_type = context.user_data["volunteer_data"].get("help_type", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        contact = context.user_data["volunteer_data"].get("contact", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        contact_other = context.user_data["volunteer_data"].get("contact_other", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")
        volunteer_info = f"""*–ù–æ–≤—ã–π –≤–æ–ª–æ–Ω—Ç—ë—Ä!*
*ID:* {user_id}
*–ò–º—è:* {name}
*–†–µ–≥–∏–æ–Ω:* {region}
*–¢–∏–ø –ø–æ–º–æ—â–∏:* {help_type}
*–ö–æ–Ω—Ç–∞–∫—Ç \\(Telegram\\):* {contact}
*–ö–æ–Ω—Ç–∞–∫—Ç \\(–î—Ä—É–≥–æ–µ\\):* {contact_other}"""

        channels = load_channels()
        channel_map = {
            "—é—Ä–∏–¥–∏—á–µ—Å–∫": "t64_legal",
            "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫": "t64_psych",
            "–º–µ–¥–∏—Ü–∏–Ω—Å–∫": "t64_gen",
            "—Ñ–∏–Ω–∞–Ω—Å–æ–≤": "t64_gen",
            "—Ç–µ—Ö–Ω–∏—á–µ—Å–∫": "t64_gen",
            "–¥—Ä—É–≥": "t64_gen",
            "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω": "t64_misc",
            "—Ç–µ–∫—Å—Ç": "t64_misc",
            "–º–æ–¥–µ—Ä–∞—Ü": "t64_misc",
        }

        tasks = [context.bot.send_message(chat_id=channels["t64_admin"], text=volunteer_info, parse_mode="MarkdownV2")]
        help_type_lower = context.user_data["volunteer_data"].get("help_type", "").lower()
        for keyword, channel_name in channel_map.items():
            if keyword in help_type_lower:
                tasks.append(context.bot.send_message(chat_id=channels[channel_name], text=volunteer_info, parse_mode="MarkdownV2"))

        try:
            await asyncio.gather(*tasks)
            logger.info(f"–î–∞–Ω–Ω—ã–µ –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {volunteer_info}")
        except TelegramError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤–æ–ª–æ–Ω—Ç—ë—Ä–∞: {e}", exc_info=True)

        await update.message.reply_text(
            escape_markdown("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –ø–æ–º–æ—á—å! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞.", version=2),
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="volunteer_finish")]]) if update.message else InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]) ,
            parse_mode="MarkdownV2"
        )
        update_stats(user_id, "volunteer_registration")
        context.user_data.clear()
        return BotState.VOLUNTEER_FINISH if update.message else BotState.MAIN_MENU
    elif update.callback_query and update.callback_query.data == "cancel_volunteer":
        await update.callback_query.message.edit_text(
            CANCEL_MESSAGE,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]),
            parse_mode="MarkdownV2"
        )
        context.user_data.clear()
        return ConversationHandler.END
    return BotState.VOLUNTEER_CONTACT

async def volunteer_finish_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        if query.data == "volunteer_finish":
            await query.message.edit_text(
                escape_markdown("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥—É!", version=2),
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]]),
                parse_mode="MarkdownV2"
            )
            return BotState.MAIN_MENU
        elif query.data == "back_to_main":
            await query.message.edit_text(
                escape_markdown("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", version=2),
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üÜò –ü–æ–ø—Ä–æ—Å–∏—Ç—å –æ –ø–æ–º–æ—â–∏", callback_data="main_help"),
                                                  InlineKeyboardButton("‚ûï –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—Å—É—Ä—Å", callback_data="main_resource")],
                                                 [InlineKeyboardButton("ü§ù –°—Ç–∞—Ç—å –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–º", callback_data="main_volunteer"),
                                                  InlineKeyboardButton("üí∏ –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ø—Ä–æ–µ–∫—Ç", callback_data="main_donate")],
                                                 [InlineKeyboardButton("‚úâÔ∏è –ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="main_anonymous")]
                                                ]),
                parse_mode="MarkdownV2"
            )
            return BotState.MAIN_MENU
    return BotState.VOLUNTEER_FINISH
