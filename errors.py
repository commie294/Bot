from typing import Optional, Any, Dict
import logging
from telegram import Update
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

class BotError(Exception):
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –æ—à–∏–±–æ–∫ –±–æ—Ç–∞"""
    def __init__(
        self, 
        message: str, 
        user_friendly: Optional[str] = None,
        context: Optional[Dict[str, Any]] = None
    ):
        self.user_friendly = user_friendly or "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        self.context = context or {}
        super().__init__(message)

class TelegramAPIError(BotError):
    """–û—à–∏–±–∫–∞ API Telegram"""
    def __init__(self, original_error: Exception, context: Optional[dict] = None):
        super().__init__(
            f"Telegram API error: {str(original_error)}",
            "–û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å Telegram. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            context
        )
        self.original_error = original_error

class ValidationError(BotError):
    """–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    pass

class StateError(BotError):
    """–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞"""
    pass

async def global_error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫:
    - –õ–æ–≥–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏
    - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∞–¥–º–∏–Ω—É
    - –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
    """
    error = context.error
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    if isinstance(error, BotError):
        logger.warning(f"BotError: {error}", extra=error.context)
    else:
        logger.critical(f"Unhandled error: {error}", exc_info=True)
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if isinstance(update, Update):
        try:
            await update.effective_message.reply_text(
                getattr(error, 'user_friendly', "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
            )
        except Exception as e:
            logger.error(f"Failed to send error message: {e}")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
    if Config.ADMIN_CHAT_ID:
        try:
            await context.bot.send_message(
                chat_id=Config.ADMIN_CHAT_ID,
                text=(
                    f"üö® *Critical Error*\n\n"
                    f"```{type(error).__name__}: {error}```\n"
                    f"User: {update.effective_user.id if update else 'None'}"
                ),
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"Failed to notify admin: {e}")
